// Package tado provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tado

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for AirConditioningMode.
const (
	AirConditioningModeAUTO AirConditioningMode = "AUTO"
	AirConditioningModeCOOL AirConditioningMode = "COOL"
	AirConditioningModeDRY  AirConditioningMode = "DRY"
	AirConditioningModeFAN  AirConditioningMode = "FAN"
	AirConditioningModeHEAT AirConditioningMode = "HEAT"
)

// Defines values for AirFreshness.
const (
	FAIR  AirFreshness = "FAIR"
	FRESH AirFreshness = "FRESH"
)

// Defines values for BatteryState.
const (
	BatteryStateLOW    BatteryState = "LOW"
	BatteryStateNORMAL BatteryState = "NORMAL"
)

// Defines values for CallForHeatValue.
const (
	CallForHeatValueHIGH   CallForHeatValue = "HIGH"
	CallForHeatValueLOW    CallForHeatValue = "LOW"
	CallForHeatValueMEDIUM CallForHeatValue = "MEDIUM"
	CallForHeatValueNONE   CallForHeatValue = "NONE"
)

// Defines values for DayType.
const (
	FRIDAY         DayType = "FRIDAY"
	MONDAY         DayType = "MONDAY"
	MONDAYTOFRIDAY DayType = "MONDAY_TO_FRIDAY"
	MONDAYTOSUNDAY DayType = "MONDAY_TO_SUNDAY"
	SATURDAY       DayType = "SATURDAY"
	SUNDAY         DayType = "SUNDAY"
	THURSDAY       DayType = "THURSDAY"
	TUESDAY        DayType = "TUESDAY"
	WEDNESDAY      DayType = "WEDNESDAY"
)

// Defines values for FanLevel.
const (
	FanLevelAUTO   FanLevel = "AUTO"
	FanLevelLEVEL1 FanLevel = "LEVEL1"
	FanLevelLEVEL2 FanLevel = "LEVEL2"
	FanLevelLEVEL3 FanLevel = "LEVEL3"
	FanLevelLEVEL4 FanLevel = "LEVEL4"
	FanLevelLEVEL5 FanLevel = "LEVEL5"
	FanLevelSILENT FanLevel = "SILENT"
)

// Defines values for HomeTemperatureUnit.
const (
	CELSIUS    HomeTemperatureUnit = "CELSIUS"
	FAHRENHEIT HomeTemperatureUnit = "FAHRENHEIT"
)

// Defines values for HomePresence.
const (
	AWAY HomePresence = "AWAY"
	HOME HomePresence = "HOME"
)

// Defines values for HorizontalSwing.
const (
	HorizontalSwingLEFT     HorizontalSwing = "LEFT"
	HorizontalSwingMIDLEFT  HorizontalSwing = "MID_LEFT"
	HorizontalSwingMIDRIGHT HorizontalSwing = "MID_RIGHT"
	HorizontalSwingOFF      HorizontalSwing = "OFF"
	HorizontalSwingON       HorizontalSwing = "ON"
	HorizontalSwingRIGHT    HorizontalSwing = "RIGHT"
)

// Defines values for HumidityLevel.
const (
	HumidityLevelCOMFY HumidityLevel = "COMFY"
	HumidityLevelDRY   HumidityLevel = "DRY"
	HumidityLevelHUMID HumidityLevel = "HUMID"
)

// Defines values for Light.
const (
	LightOFF Light = "OFF"
	LightON  Light = "ON"
)

// Defines values for Orientation.
const (
	HORIZONTAL Orientation = "HORIZONTAL"
	VERTICAL   Orientation = "VERTICAL"
)

// Defines values for Power.
const (
	PowerOFF Power = "OFF"
	PowerON  Power = "ON"
)

// Defines values for TemperatureLevel.
const (
	TemperatureLevelCOLD  TemperatureLevel = "COLD"
	TemperatureLevelCOMFY TemperatureLevel = "COMFY"
	TemperatureLevelHOT   TemperatureLevel = "HOT"
	TemperatureLevelWARM  TemperatureLevel = "WARM"
)

// Defines values for TimetableTypeId.
const (
	N0 TimetableTypeId = 0
	N1 TimetableTypeId = 1
	N2 TimetableTypeId = 2
)

// Defines values for TimetableTypeType.
const (
	ONEDAY   TimetableTypeType = "ONE_DAY"
	SEVENDAY TimetableTypeType = "SEVEN_DAY"
	THREEDAY TimetableTypeType = "THREE_DAY"
)

// Defines values for VerticalSwing.
const (
	VerticalSwingDOWN    VerticalSwing = "DOWN"
	VerticalSwingMID     VerticalSwing = "MID"
	VerticalSwingMIDDOWN VerticalSwing = "MID_DOWN"
	VerticalSwingMIDUP   VerticalSwing = "MID_UP"
	VerticalSwingOFF     VerticalSwing = "OFF"
	VerticalSwingON      VerticalSwing = "ON"
	VerticalSwingUP      VerticalSwing = "UP"
)

// Defines values for WeatherState.
const (
	CLOUDY        WeatherState = "CLOUDY"
	CLOUDYMOSTLY  WeatherState = "CLOUDY_MOSTLY"
	CLOUDYPARTLY  WeatherState = "CLOUDY_PARTLY"
	FOGGY         WeatherState = "FOGGY"
	NIGHTCLEAR    WeatherState = "NIGHT_CLEAR"
	NIGHTCLOUDY   WeatherState = "NIGHT_CLOUDY"
	RAIN          WeatherState = "RAIN"
	SCATTEREDRAIN WeatherState = "SCATTERED_RAIN"
	SUN           WeatherState = "SUN"
)

// Defines values for ZoneOverlayTerminationType.
const (
	ZoneOverlayTerminationTypeMANUAL   ZoneOverlayTerminationType = "MANUAL"
	ZoneOverlayTerminationTypeTADOMODE ZoneOverlayTerminationType = "TADO_MODE"
	ZoneOverlayTerminationTypeTIMER    ZoneOverlayTerminationType = "TIMER"
)

// Defines values for ZoneOverlayTerminationTypeSkillBasedApp.
const (
	ZoneOverlayTerminationTypeSkillBasedAppMANUAL        ZoneOverlayTerminationTypeSkillBasedApp = "MANUAL"
	ZoneOverlayTerminationTypeSkillBasedAppNEXTTIMEBLOCK ZoneOverlayTerminationTypeSkillBasedApp = "NEXT_TIME_BLOCK"
	ZoneOverlayTerminationTypeSkillBasedAppTADOMODE      ZoneOverlayTerminationTypeSkillBasedApp = "TADO_MODE"
	ZoneOverlayTerminationTypeSkillBasedAppTIMER         ZoneOverlayTerminationTypeSkillBasedApp = "TIMER"
)

// Defines values for ZoneType.
const (
	AIRCONDITIONING ZoneType = "AIR_CONDITIONING"
	HEATING         ZoneType = "HEATING"
	HOTWATER        ZoneType = "HOT_WATER"
)

// ActivityDataPoints Part of ZoneState. Empty for a HOT_WATER zone
type ActivityDataPoints struct {
	// HeatingPower Used in Weather and ZoneState, to express quantities like heating power, humidity and solar intensity.
	HeatingPower *PercentageDataPoint `json:"heatingPower,omitempty"`
}

// AirComfort result of /homes/{homeId}/airComfort
type AirComfort struct {
	Comfort *[]struct {
		Coordinate *struct {
			Angular *int     `json:"angular,omitempty"`
			Radial  *float32 `json:"radial,omitempty"`
		} `json:"coordinate,omitempty"`

		// HumidityLevel Element of AirComfort
		HumidityLevel *HumidityLevel `json:"humidityLevel,omitempty"`

		// RoomId ID of a zone (unique only within the home it belongs to)
		RoomId *ZoneId `json:"roomId,omitempty"`

		// TemperatureLevel Used in AirComfort
		TemperatureLevel *TemperatureLevel `json:"temperatureLevel,omitempty"`
	} `json:"comfort,omitempty"`
	Freshness *struct {
		LastOpenWindow *time.Time `json:"lastOpenWindow,omitempty"`

		// Value The air freshness level for the entire home. Used in AirComfort.
		Value *AirFreshness `json:"value,omitempty"`
	} `json:"freshness,omitempty"`
}

// AirConditioningMode defines model for AirConditioningMode.
type AirConditioningMode string

// AirConditioningModeCapabilities defines model for AirConditioningModeCapabilities.
type AirConditioningModeCapabilities struct {
	FanLevel        *[]FanLevel        `json:"fanLevel,omitempty"`
	HorizontalSwing *[]HorizontalSwing `json:"horizontalSwing,omitempty"`
	Light           *[]Light           `json:"light,omitempty"`

	// Temperatures property available for zone type HEATING
	Temperatures  *TemperatureCapability `json:"temperatures,omitempty"`
	VerticalSwing *[]VerticalSwing       `json:"verticalSwing,omitempty"`
}

// AirConditioningModeCapabilitiesBase used in ZoneCapabilities for zones of type AIR_CONDITIONING
type AirConditioningModeCapabilitiesBase struct {
	FanLevel        *[]FanLevel        `json:"fanLevel,omitempty"`
	HorizontalSwing *[]HorizontalSwing `json:"horizontalSwing,omitempty"`
	Light           *[]Light           `json:"light,omitempty"`
	VerticalSwing   *[]VerticalSwing   `json:"verticalSwing,omitempty"`
}

// AirConditioningZoneSettings defines model for AirConditioningZoneSettings.
type AirConditioningZoneSettings struct {
	// FanLevel Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	FanLevel *FanLevel `json:"fanLevel,omitempty"`

	// HorizontalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	HorizontalSwing *HorizontalSwing `json:"horizontalSwing,omitempty"`

	// Light Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	Light       *Light       `json:"light,omitempty"`
	Temperature *Temperature `json:"temperature,omitempty"`

	// VerticalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	VerticalSwing *VerticalSwing `json:"verticalSwing,omitempty"`
}

// AirConditioningZoneSettingsBase used in ZoneCapabilities for zones of type AIR_CONDITIONING
type AirConditioningZoneSettingsBase struct {
	// FanLevel Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	FanLevel *FanLevel `json:"fanLevel,omitempty"`

	// HorizontalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	HorizontalSwing *HorizontalSwing `json:"horizontalSwing,omitempty"`

	// Light Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	Light *Light `json:"light,omitempty"`

	// VerticalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	VerticalSwing *VerticalSwing `json:"verticalSwing,omitempty"`
}

// AirFreshness The air freshness level for the entire home. Used in AirComfort.
type AirFreshness string

// AwayRadiusInput defines model for AwayRadiusInput.
type AwayRadiusInput struct {
	AwayRadiusInMeters *float32 `json:"awayRadiusInMeters,omitempty"`
}

// BatteryState device property known to be present for DeviceType SU02, VA02
type BatteryState string

// Boiler element of HeatingSystem
type Boiler struct {
	Found *bool `json:"found,omitempty"`

	// Id Tado specific id of the type of boiler you have, it gets set when you select a boiler via the app
	Id      *int  `json:"id,omitempty"`
	Present *bool `json:"present,omitempty"`
}

// BooleanDataInterval defines model for BooleanDataInterval.
type BooleanDataInterval struct {
	From  *time.Time `json:"from,omitempty"`
	To    *time.Time `json:"to,omitempty"`
	Value *bool      `json:"value,omitempty"`
}

// BooleanTimeSeries Element of DayReport and ZoneState.  Used to express measuredData.measuringDeviceConnected (ZoneState), hotWaterProduction (ZoneState)  and weather.sunny (DayReport)
type BooleanTimeSeries struct {
	DataIntervals  *[]BooleanDataInterval `json:"dataIntervals,omitempty"`
	TimeSeriesType *string                `json:"timeSeriesType,omitempty"`
	ValueType      *string                `json:"valueType,omitempty"`
}

// CallForHeatDataInterval defines model for CallForHeatDataInterval.
type CallForHeatDataInterval struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`

	// Value element of DayReport
	Value *CallForHeatValue `json:"value,omitempty"`
}

// CallForHeatTimeSeries element of DayReport
type CallForHeatTimeSeries struct {
	DataIntervals  *[]CallForHeatDataInterval `json:"dataIntervals,omitempty"`
	TimeSeriesType *string                    `json:"timeSeriesType,omitempty"`
	ValueType      *string                    `json:"valueType,omitempty"`
}

// CallForHeatValue element of DayReport
type CallForHeatValue string

// DataInterval element of a DayReport
type DataInterval struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`
}

// DayReport result of /homes/{homeId}/zones/{zoneId}/dayReport
type DayReport struct {
	// CallForHeat element of DayReport
	CallForHeat *CallForHeatTimeSeries `json:"callForHeat,omitempty"`

	// HotWaterProduction Element of DayReport and ZoneState.  Used to express measuredData.measuringDeviceConnected (ZoneState), hotWaterProduction (ZoneState)  and weather.sunny (DayReport)
	HotWaterProduction *BooleanTimeSeries `json:"hotWaterProduction,omitempty"`
	HoursInDay         *int               `json:"hoursInDay,omitempty"`
	Interval           *struct {
		From *time.Time `json:"from,omitempty"`
		To   *time.Time `json:"to,omitempty"`
	} `json:"interval,omitempty"`
	MeasuredData *struct {
		// Humidity Element of DayReport, used to express humidity.
		Humidity *PercentageTimeSeries `json:"humidity,omitempty"`

		// InsideTemperature Element of DayReport, used to express inside temperature.
		InsideTemperature *TemperatureTimeSeries `json:"insideTemperature,omitempty"`

		// MeasuringDeviceConnected Element of DayReport and ZoneState.  Used to express measuredData.measuringDeviceConnected (ZoneState), hotWaterProduction (ZoneState)  and weather.sunny (DayReport)
		MeasuringDeviceConnected *BooleanTimeSeries `json:"measuringDeviceConnected,omitempty"`
	} `json:"measuredData,omitempty"`

	// Settings element of DayReport
	Settings *HeatingSettingTimeSeries `json:"settings,omitempty"`

	// Stripes Element of DayReport
	Stripes *StripesTimeSeries `json:"stripes,omitempty"`
	Weather *struct {
		// Condition Element of DayReport
		Condition *WeatherConditionTimeSeries `json:"condition,omitempty"`

		// Slots Element of DayReport
		Slots *WeatherSlotTimeSeries `json:"slots,omitempty"`

		// Sunny Element of DayReport and ZoneState.  Used to express measuredData.measuringDeviceConnected (ZoneState), hotWaterProduction (ZoneState)  and weather.sunny (DayReport)
		Sunny *BooleanTimeSeries `json:"sunny,omitempty"`
	} `json:"weather,omitempty"`
	ZoneType *ZoneType `json:"zoneType,omitempty"`
}

// DayType used in timetables
//
// applicable values:
// * for timetableType 0 (ONE_DAY) : MONDAY_TO_SUNDAY
// * for timetableType 1 (THREE_DAY): MONDAY_TO_FRIDAY, SATURDAY, SUNDAY
// * for timetableType 2 (SEVEN_DAY): MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
type DayType string

// DazzleInput Used in PUT /homes/{homeId}/zones/{zoneId}/dazzle
type DazzleInput struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DefaultZoneOverlay Used in /homes/{homeId}/zones/{zoneId}/defaultOverlay.
// It defines the default zone overlay termination type which tado will use when a user set zone settings (like temperature) via a physical tado device like a Smart Thermostat. (this results in setting a ZoneOverlay).
// The `type` defined here is used as the value for ZoneOverlay.termination.typeSkillBasedApp when setting a ZoneOverlay.
type DefaultZoneOverlay struct {
	TerminationCondition *struct {
		// DurationInSeconds only applicable when type is TIMER
		DurationInSeconds *int `json:"durationInSeconds,omitempty"`

		// Type Element of a zone overlay.
		// Does not contain NEXT_TIME_BLOCK which is present in the ZoneOverlayTerminationTypeSkillBasedApp enum.
		// Value descriptions:
		// * MANUAL: the (temperature) settings in the ZoneOverlay will last indefinitely
		// * TIMER: the (temperature) settings in the ZoneOverlay will last for a fixed number of seconds,  starting at the moment the ZoneOverlay was set (requires setting durationInSeconds as well)
		// * TADO_MODE: the (temperature) settings in the ZoneOverlay will last until the next time block in the active timetable starts
		Type *ZoneOverlayTerminationType `json:"type,omitempty"`
	} `json:"terminationCondition,omitempty"`
}

// Device A piece of tado hardware
//
// Some of the properties are only available for certain device types.  Certain values for some properties are only applicable to certain device types.  Wherever device type specific information is known, it is documented.  But you cannot count on this information being fully complete.
type Device struct {
	// BatteryState device property known to be present for DeviceType SU02, VA02
	BatteryState    *BatteryState `json:"batteryState,omitempty"`
	Characteristics *struct {
		// Capabilities array known to be empty for DeviceType BR02
		Capabilities *[]string `json:"capabilities,omitempty"`
	} `json:"characteristics,omitempty"`

	// ChildLockEnabled property known to be present for DeviceType VA02
	ChildLockEnabled *bool `json:"childLockEnabled,omitempty"`

	// ConnectionState property known to be present for DeviceType SU02, VA02, BR02
	ConnectionState *struct {
		Timestamp *time.Time `json:"timestamp,omitempty"`
		Value     *bool      `json:"value,omitempty"`
	} `json:"connectionState,omitempty"`
	CurrentFwVersion *string `json:"currentFwVersion,omitempty"`

	// DeviceType data element of Device
	//
	// known values:
	// * BR02 (Wireless Receiver)
	// * BU01 (Boiler controller?)
	// * GW02 (Internet Gateway?)
	// * IB01 (Internet Bridge)
	// * RU01 (Remote Thermostat)
	// * RU02 (Wired Smart Thermostat V3+)
	// * SU02 (Wireless Smart Thermostat V3+)
	// * VA01
	// * VA02 (Smart Radiator Thermostat V3+)
	DeviceType *DeviceType `json:"deviceType,omitempty"`

	// InPairingMode property known to be present for DeviceType IB01
	InPairingMode *bool `json:"inPairingMode,omitempty"`

	// IsDriverConfigured property known to be present for DeviceType BR02
	IsDriverConfigured *bool `json:"isDriverConfigured,omitempty"`

	// MountingState property known to be present for DeviceType VA02
	MountingState *struct {
		Timestamp *time.Time `json:"timestamp,omitempty"`

		// Value known values:
		// * CALIBRATED
		Value *string `json:"value,omitempty"`
	} `json:"mountingState,omitempty"`

	// MountingStateWithError property known to be present for DeviceType VA02; known values: CALIBRATED
	MountingStateWithError *string `json:"mountingStateWithError,omitempty"`

	// Orientation tado device property known to be present for DeviceType VA02
	Orientation *Orientation `json:"orientation,omitempty"`

	// SerialNo the serialNo of a tado device
	SerialNo      *DeviceId `json:"serialNo,omitempty"`
	ShortSerialNo *string   `json:"shortSerialNo,omitempty"`
}

// DeviceExtra defines model for DeviceExtra.
type DeviceExtra struct {
	// BatteryState device property known to be present for DeviceType SU02, VA02
	BatteryState    *BatteryState `json:"batteryState,omitempty"`
	Characteristics *struct {
		// Capabilities array known to be empty for DeviceType BR02
		Capabilities *[]string `json:"capabilities,omitempty"`
	} `json:"characteristics,omitempty"`

	// ChildLockEnabled property known to be present for DeviceType VA02
	ChildLockEnabled *bool `json:"childLockEnabled,omitempty"`

	// ConnectionState property known to be present for DeviceType SU02, VA02, BR02
	ConnectionState *struct {
		Timestamp *time.Time `json:"timestamp,omitempty"`
		Value     *bool      `json:"value,omitempty"`
	} `json:"connectionState,omitempty"`
	CurrentFwVersion *string `json:"currentFwVersion,omitempty"`

	// DeviceType data element of Device
	//
	// known values:
	// * BR02 (Wireless Receiver)
	// * BU01 (Boiler controller?)
	// * GW02 (Internet Gateway?)
	// * IB01 (Internet Bridge)
	// * RU01 (Remote Thermostat)
	// * RU02 (Wired Smart Thermostat V3+)
	// * SU02 (Wireless Smart Thermostat V3+)
	// * VA01
	// * VA02 (Smart Radiator Thermostat V3+)
	DeviceType *DeviceType `json:"deviceType,omitempty"`
	Duties     *[]string   `json:"duties,omitempty"`

	// InPairingMode property known to be present for DeviceType IB01
	InPairingMode *bool `json:"inPairingMode,omitempty"`

	// IsDriverConfigured property known to be present for DeviceType BR02
	IsDriverConfigured *bool `json:"isDriverConfigured,omitempty"`

	// MountingState property known to be present for DeviceType VA02
	MountingState *struct {
		Timestamp *time.Time `json:"timestamp,omitempty"`

		// Value known values:
		// * CALIBRATED
		Value *string `json:"value,omitempty"`
	} `json:"mountingState,omitempty"`

	// MountingStateWithError property known to be present for DeviceType VA02; known values: CALIBRATED
	MountingStateWithError *string `json:"mountingStateWithError,omitempty"`

	// Orientation tado device property known to be present for DeviceType VA02
	Orientation *Orientation `json:"orientation,omitempty"`

	// SerialNo the serialNo of a tado device
	SerialNo      *DeviceId `json:"serialNo,omitempty"`
	ShortSerialNo *string   `json:"shortSerialNo,omitempty"`
}

// DeviceId the serialNo of a tado device
type DeviceId = string

// DeviceList result of /homes/{homeId}/zones/{zoneId}/deviceList
type DeviceList struct {
	Entries *[]DeviceListItem `json:"entries,omitempty"`
}

// DeviceListItem Element of DeviceList
type DeviceListItem struct {
	// Device A piece of tado hardware
	//
	// Some of the properties are only available for certain device types.  Certain values for some properties are only applicable to certain device types.  Wherever device type specific information is known, it is documented.  But you cannot count on this information being fully complete.
	Device *Device `json:"device,omitempty"`

	// Type data element of Device
	//
	// known values:
	// * BR02 (Wireless Receiver)
	// * BU01 (Boiler controller?)
	// * GW02 (Internet Gateway?)
	// * IB01 (Internet Bridge)
	// * RU01 (Remote Thermostat)
	// * RU02 (Wired Smart Thermostat V3+)
	// * SU02 (Wireless Smart Thermostat V3+)
	// * VA01
	// * VA02 (Smart Radiator Thermostat V3+)
	Type *DeviceType `json:"type,omitempty"`

	// Zone This property is not present for devices of type 'IB01' (Internet Bridge) and 'BR02' (Wireless Receiver).
	Zone *struct {
		// Discriminator ID of a zone (unique only within the home it belongs to)
		Discriminator *ZoneId `json:"discriminator,omitempty"`

		// Duties This property has only been seen for devices of type 'SU02'
		Duties *[]string `json:"duties,omitempty"`
	} `json:"zone,omitempty"`
}

// DeviceType data element of Device
//
// known values:
// * BR02 (Wireless Receiver)
// * BU01 (Boiler controller?)
// * GW02 (Internet Gateway?)
// * IB01 (Internet Bridge)
// * RU01 (Remote Thermostat)
// * RU02 (Wired Smart Thermostat V3+)
// * SU02 (Wireless Smart Thermostat V3+)
// * VA01
// * VA02 (Smart Radiator Thermostat V3+)
type DeviceType = string

// EarlyStart defines model for EarlyStart.
type EarlyStart struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code meaningful textual code associated with the HTTP status code like 'accessDenied' (for 403) or 'unauthorized' for (401)
	Code *string `json:"code,omitempty"`

	// Title detailed description of the error in natural language (english)
	Title *string `json:"title,omitempty"`
}

// Error422 defines model for Error422.
type Error422 struct {
	// Code meaningful textual code associated with the HTTP status code like 'accessDenied' (for 403) or 'unauthorized' for (401)
	Code *string `json:"code,omitempty"`

	// Title detailed description of the error in natural language (english)
	Title    *string   `json:"title,omitempty"`
	ZoneType *ZoneType `json:"zoneType,omitempty"`
}

// ErrorResponse error object returned for non-200 responses
type ErrorResponse struct {
	Errors *[]Error `json:"errors,omitempty"`
}

// ErrorResponse422 error object returned for 422 responses
type ErrorResponse422 struct {
	Errors *[]Error422 `json:"errors,omitempty"`
}

// FanLevel Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
type FanLevel string

// HeatingCircuit Result of /homes/{homeId}/heatingCircuits
//
// A tado device which controls a heating circuit
type HeatingCircuit struct {
	// DriverSerialNo serial number of the tado device which controls the heating circuit
	DriverSerialNo *string `json:"driverSerialNo,omitempty"`

	// DriverShortSerialNo short serial number of the tado device which controls the heating circuit
	DriverShortSerialNo *string           `json:"driverShortSerialNo,omitempty"`
	Number              *HeatingCircuitId `json:"number,omitempty"`
}

// HeatingCircuitId defines model for HeatingCircuitId.
type HeatingCircuitId = int

// HeatingCircuitInput Used in PUT /homes/{homeId}/zones/{zoneId}/control/heatingCircuit
type HeatingCircuitInput struct {
	CircuitNumber *HeatingCircuitId `json:"circuitNumber,omitempty"`
}

// HeatingSettingDataInterval defines model for HeatingSettingDataInterval.
type HeatingSettingDataInterval struct {
	From  *time.Time           `json:"from,omitempty"`
	To    *time.Time           `json:"to,omitempty"`
	Value *HeatingSettingValue `json:"value,omitempty"`
}

// HeatingSettingTimeSeries element of DayReport
type HeatingSettingTimeSeries struct {
	DataIntervals  *[]HeatingSettingDataInterval `json:"dataIntervals,omitempty"`
	TimeSeriesType *string                       `json:"timeSeriesType,omitempty"`
	ValueType      *string                       `json:"valueType,omitempty"`
}

// HeatingSettingValue defines model for HeatingSettingValue.
type HeatingSettingValue struct {
	// Power used in ZoneSetting
	Power       *Power       `json:"power,omitempty"`
	Temperature *Temperature `json:"temperature,omitempty"`
	Type        *string      `json:"type,omitempty"`
}

// HeatingSystem result of /homes/{homeId}/heatingSystem
type HeatingSystem struct {
	// Boiler element of HeatingSystem
	Boiler *Boiler `json:"boiler,omitempty"`

	// UnderfloorHeating Element of HeatingSystem
	UnderfloorHeating *UnderfloorHeating `json:"underfloorHeating,omitempty"`
}

// Home defines model for Home.
type Home struct {
	// Address postal address of this home
	Address *struct {
		AddressLine1 *string `json:"addressLine1,omitempty"`
		AddressLine2 *string `json:"addressLine2"`
		City         *string `json:"city,omitempty"`

		// Country most probably an ISO 3166-1 alpha-3 country code
		Country *string `json:"country,omitempty"`
		State   *string `json:"state"`
		ZipCode *string `json:"zipCode,omitempty"`
	} `json:"address,omitempty"`
	AwayRadiusInMeters *int `json:"awayRadiusInMeters,omitempty"`

	// ChristmasModeEnabled no idea what this means, but would be really interesting to know more...
	ChristmasModeEnabled  *bool `json:"christmasModeEnabled,omitempty"`
	ConsentGrantSkippable *bool `json:"consentGrantSkippable,omitempty"`

	// ContactDetails the primary contact for this home;  also appears to be the only one to receive any email notifications (like 'low battery' or 'open window' warnings)
	ContactDetails *struct {
		Email *string `json:"email,omitempty"`
		Name  *string `json:"name,omitempty"`
		Phone *string `json:"phone,omitempty"`
	} `json:"contactDetails,omitempty"`
	DateCreated     *time.Time `json:"dateCreated,omitempty"`
	DateTimeZone    *string    `json:"dateTimeZone,omitempty"`
	EnabledFeatures *[]string  `json:"enabledFeatures,omitempty"`

	// Generation known values:
	// * PRE_LINE_X
	Generation *string `json:"generation,omitempty"`

	// Geolocation Geo location of this home.
	Geolocation *struct {
		Latitude  *float32 `json:"latitude,omitempty"`
		Longitude *float32 `json:"longitude,omitempty"`
	} `json:"geolocation,omitempty"`

	// Id unique home ID
	Id *HomeId `json:"id,omitempty"`

	// IncidentDetection Data elements of a Home. And used in /homes/{homeId}/incidentDetection
	IncidentDetection     *IncidentDetection `json:"incidentDetection,omitempty"`
	InstallationCompleted *bool              `json:"installationCompleted,omitempty"`
	IsAirComfortEligible  *bool              `json:"isAirComfortEligible,omitempty"`
	IsBalanceAcEligible   *bool              `json:"isBalanceAcEligible,omitempty"`
	IsBalanceHpEligible   *bool              `json:"isBalanceHpEligible,omitempty"`
	IsEnergyIqEligible    *bool              `json:"isEnergyIqEligible,omitempty"`
	IsHeatPumpInstalled   *bool              `json:"isHeatPumpInstalled,omitempty"`
	IsHeatSourceInstalled *bool              `json:"isHeatSourceInstalled,omitempty"`
	Language              *string            `json:"language,omitempty"`

	// Name user assigned name for this home
	Name                       *string      `json:"name,omitempty"`
	Partner                    *interface{} `json:"partner"`
	ShowAutoAssistReminders    *bool        `json:"showAutoAssistReminders,omitempty"`
	SimpleSmartScheduleEnabled *bool        `json:"simpleSmartScheduleEnabled,omitempty"`

	// Skills this is assumed to be an array of strings, currently tested set-up returns an empty array
	Skills                              *[]string            `json:"skills,omitempty"`
	SupportsFlowTemperatureOptimization *bool                `json:"supportsFlowTemperatureOptimization,omitempty"`
	TemperatureUnit                     *HomeTemperatureUnit `json:"temperatureUnit,omitempty"`

	// ZonesCount number of zones is this home
	ZonesCount *int `json:"zonesCount,omitempty"`
}

// HomeTemperatureUnit defines model for Home.TemperatureUnit.
type HomeTemperatureUnit string

// HomeBase basic home information which is present in the User component
type HomeBase struct {
	// Id unique home ID
	Id *HomeId `json:"id,omitempty"`

	// Name user assigned name for this home
	Name *string `json:"name,omitempty"`
}

// HomeDetails defines model for HomeDetails.
type HomeDetails struct {
	// Address postal address of this home
	Address *struct {
		AddressLine1 *string `json:"addressLine1,omitempty"`
		AddressLine2 *string `json:"addressLine2"`
		City         *string `json:"city,omitempty"`

		// Country most probably an ISO 3166-1 alpha-3 country code
		Country *string `json:"country,omitempty"`
		State   *string `json:"state"`
		ZipCode *string `json:"zipCode,omitempty"`
	} `json:"address,omitempty"`

	// ContactDetails the primary contact for this home;  also appears to be the only one to receive any email notifications (like 'low battery' or 'open window' warnings)
	ContactDetails *struct {
		Email *string `json:"email,omitempty"`
		Name  *string `json:"name,omitempty"`
		Phone *string `json:"phone,omitempty"`
	} `json:"contactDetails,omitempty"`

	// Geolocation Geo location of this home.
	Geolocation *struct {
		Latitude  *float32 `json:"latitude,omitempty"`
		Longitude *float32 `json:"longitude,omitempty"`
	} `json:"geolocation,omitempty"`

	// Id unique home ID
	Id *HomeId `json:"id,omitempty"`

	// Name user assigned name for this home
	Name *string `json:"name,omitempty"`
}

// HomeId unique home ID
type HomeId = int64

// HomePresence defines model for HomePresence.
type HomePresence string

// HomeState Indicates if tado acts as if there are people present in the home or not. Result of /homes/{homeId}/state.
// Presence can be auto-determined by tado based on geofencing of the mobile devices linked to the home (requires a paid Auto-Assist subscription), or can be manually set by a user.
type HomeState struct {
	Presence       *HomePresence `json:"presence,omitempty"`
	PresenceLocked *bool         `json:"presenceLocked,omitempty"`

	// ShowHomePresenceSwitchButton This property is present when all mobile devices linked to this home which have geofencing enabled  are no longer in (or near) the home.
	// It is a hint to the user to manually set the home presence to AWAY.  When you have a Auto-Assist subscription, tado will do that automatically for you.
	ShowHomePresenceSwitchButton *bool `json:"showHomePresenceSwitchButton,omitempty"`
}

// HorizontalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
type HorizontalSwing string

// HumidityLevel Element of AirComfort
type HumidityLevel string

// IncidentDetection Data elements of a Home. And used in /homes/{homeId}/incidentDetection
type IncidentDetection struct {
	Enabled   *bool `json:"enabled,omitempty"`
	Supported *bool `json:"supported,omitempty"`
}

// IncidentDetectionInput Used in PUT /homes/{homeId}/incidentDetection
type IncidentDetectionInput struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// Light Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
type Light string

// MobileDevice A phone/tablet/iPad which has the tado app installed, belonging to a particular user  who is a member/resident of a home controlled by tado.
type MobileDevice struct {
	DeviceMetadata *struct {
		Locale    *string `json:"locale,omitempty"`
		Model     *string `json:"model,omitempty"`
		OsVersion *string `json:"osVersion,omitempty"`
		Platform  *string `json:"platform,omitempty"`
	} `json:"deviceMetadata,omitempty"`
	Id *MobileDeviceId `json:"id,omitempty"`

	// Location This data element is only present for mobile devices which have geofencing switched on in their tado app.
	Location *MobileDeviceLocation `json:"location,omitempty"`

	// Name user assigned name for this device
	Name *string `json:"name,omitempty"`

	// Settings Data element of a MobileDevice. And used in /homes/{homeId}/mobileDevices/{mobileDeviceId}/settings.
	Settings *MobileDeviceSettings `json:"settings,omitempty"`
}

// MobileDeviceId defines model for MobileDeviceId.
type MobileDeviceId = int64

// MobileDeviceLocation This data element is only present for mobile devices which have geofencing switched on in their tado app.
type MobileDeviceLocation struct {
	AtHome          *bool `json:"atHome,omitempty"`
	BearingFromHome *struct {
		Degrees *float32 `json:"degrees,omitempty"`
		Radians *float32 `json:"radians,omitempty"`
	} `json:"bearingFromHome,omitempty"`
	RelativeDistanceFromHomeFence *float32 `json:"relativeDistanceFromHomeFence,omitempty"`
	Stale                         *bool    `json:"stale,omitempty"`
}

// MobileDeviceSettings Data element of a MobileDevice. And used in /homes/{homeId}/mobileDevices/{mobileDeviceId}/settings.
type MobileDeviceSettings struct {
	// GeoTrackingEnabled When geotracking is enabled for a MobileDevice,  and the tado app installed on the device has location permissions on the device,  the MobileDevice object will also contain location details.
	GeoTrackingEnabled          *bool `json:"geoTrackingEnabled,omitempty"`
	OnDemandLogRetrievalEnabled *bool `json:"onDemandLogRetrievalEnabled,omitempty"`
	PushNotifications           *struct {
		AwayModeReminder            *bool `json:"awayModeReminder,omitempty"`
		EnergyIqReminder            *bool `json:"energyIqReminder,omitempty"`
		EnergySavingsReportReminder *bool `json:"energySavingsReportReminder,omitempty"`
		HomeModeReminder            *bool `json:"homeModeReminder,omitempty"`
		IncidentDetection           *bool `json:"incidentDetection,omitempty"`
		LowBatteryReminder          *bool `json:"lowBatteryReminder,omitempty"`
		OpenWindowReminder          *bool `json:"openWindowReminder,omitempty"`
	} `json:"pushNotifications,omitempty"`
	SpecialOffersEnabled *bool `json:"specialOffersEnabled,omitempty"`
}

// OpenWindowDetectionInput Used in PUT /homes/{homeId}/zones/{zoneId}/openWindowDetection
type OpenWindowDetectionInput struct {
	Enabled *bool `json:"enabled,omitempty"`

	// RoomId ID of a zone (unique only within the home it belongs to)
	RoomId           *ZoneId `json:"roomId,omitempty"`
	TimeoutInSeconds *int    `json:"timeoutInSeconds,omitempty"`
}

// Orientation tado device property known to be present for DeviceType VA02
type Orientation string

// PercentageDataPoint Used in Weather and ZoneState, to express quantities like heating power, humidity and solar intensity.
type PercentageDataPoint struct {
	Percentage *float32   `json:"percentage,omitempty"`
	Timestamp  *time.Time `json:"timestamp,omitempty"`
	Type       *string    `json:"type,omitempty"`
}

// PercentageDataPointInTimeSeries Element of DayReport, used to express humidity.
type PercentageDataPointInTimeSeries struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Value     *float32   `json:"value,omitempty"`
}

// PercentageTimeSeries Element of DayReport, used to express humidity.
type PercentageTimeSeries struct {
	DataPoints     *[]PercentageDataPointInTimeSeries `json:"dataPoints,omitempty"`
	Max            *float32                           `json:"max,omitempty"`
	Min            *float32                           `json:"min,omitempty"`
	PercentageUnit *string                            `json:"percentageUnit,omitempty"`
	TimeSeriesType *string                            `json:"timeSeriesType,omitempty"`
	ValueType      *string                            `json:"valueType,omitempty"`
}

// Power used in ZoneSetting
type Power string

// PresenceLock Used in /homes/{homeId}/presenceLock
type PresenceLock struct {
	HomePresence *HomePresence `json:"homePresence,omitempty"`
}

// SensorDataPoints Element of ZoneState. Empty for a HOT_WATER zone
type SensorDataPoints struct {
	// Humidity Used in Weather and ZoneState, to express quantities like heating power, humidity and solar intensity.
	Humidity *PercentageDataPoint `json:"humidity,omitempty"`

	// InsideTemperature Used in Weather and ZoneState, used to express outside or inside temperature.
	InsideTemperature *TemperatureDataPoint `json:"insideTemperature,omitempty"`
}

// StripesDataInterval defines model for StripesDataInterval.
type StripesDataInterval struct {
	From  *time.Time `json:"from,omitempty"`
	To    *time.Time `json:"to,omitempty"`
	Value *struct {
		// Setting (temperature) settings for a zone which is used in scheduled TimeTableBlocks,  in ZoneOverlays (manual override for the scheduled setting), and in AwayConfiguration (settings to be used when the home is in AWAY mode).
		//
		// The applicable properties depend on the zone type and the zone capabilities.
		Setting *ZoneSetting `json:"setting,omitempty"`

		// StripeType known values:
		//
		//  * HOME
		//
		//  * HOME_LOCATION_BASED_CONTROL_OFF
		//
		//  * OPEN_WINDOW_DETECTED
		//
		//  * OVERLAY_ACTIVE
		StripeType *string `json:"stripeType,omitempty"`
	} `json:"value,omitempty"`
}

// StripesTimeSeries Element of DayReport
type StripesTimeSeries struct {
	DataIntervals  *[]StripesDataInterval `json:"dataIntervals,omitempty"`
	TimeSeriesType *string                `json:"timeSeriesType,omitempty"`
	ValueType      *string                `json:"valueType,omitempty"`
}

// Temperature defines model for Temperature.
type Temperature struct {
	Celsius    *float32 `json:"celsius,omitempty"`
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
}

// TemperatureCapability property available for zone type HEATING
type TemperatureCapability struct {
	Celsius *struct {
		Max  *int     `json:"max,omitempty"`
		Min  *int     `json:"min,omitempty"`
		Step *float32 `json:"step,omitempty"`
	} `json:"celsius,omitempty"`
	Fahrenheit *struct {
		Max  *int     `json:"max,omitempty"`
		Min  *int     `json:"min,omitempty"`
		Step *float32 `json:"step,omitempty"`
	} `json:"fahrenheit,omitempty"`
}

// TemperatureDataPoint defines model for TemperatureDataPoint.
type TemperatureDataPoint struct {
	Celsius    *float32              `json:"celsius,omitempty"`
	Fahrenheit *float32              `json:"fahrenheit,omitempty"`
	Precision  *TemperaturePrecision `json:"precision,omitempty"`
	Timestamp  *time.Time            `json:"timestamp,omitempty"`
	Type       *string               `json:"type,omitempty"`
}

// TemperatureDataPointInTimeSeries Element of DayReport
type TemperatureDataPointInTimeSeries struct {
	Timestamp *time.Time   `json:"timestamp,omitempty"`
	Value     *Temperature `json:"value,omitempty"`
}

// TemperatureLevel Used in AirComfort
type TemperatureLevel string

// TemperaturePrecision defines model for TemperaturePrecision.
type TemperaturePrecision struct {
	Celsius    *float32 `json:"celsius,omitempty"`
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
}

// TemperatureTimeSeries Element of DayReport, used to express inside temperature.
type TemperatureTimeSeries struct {
	DataPoints     *[]TemperatureDataPointInTimeSeries `json:"dataPoints,omitempty"`
	Max            *Temperature                        `json:"max,omitempty"`
	Min            *Temperature                        `json:"min,omitempty"`
	TimeSeriesType *string                             `json:"timeSeriesType,omitempty"`
	ValueType      *string                             `json:"valueType,omitempty"`
}

// TimetableBlock Time segment of a scheduled timetable to control the (temperature) settings of a zone (a.k.a. room)
type TimetableBlock struct {
	// DayType used in timetables
	//
	// applicable values:
	// * for timetableType 0 (ONE_DAY) : MONDAY_TO_SUNDAY
	// * for timetableType 1 (THREE_DAY): MONDAY_TO_FRIDAY, SATURDAY, SUNDAY
	// * for timetableType 2 (SEVEN_DAY): MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
	DayType *DayType `json:"dayType,omitempty"`

	// End end time of this block in 24 hour clock notation
	End *string `json:"end,omitempty"`

	// GeolocationOverride When false, the settings of this time block are only active when tado is in HOME mode.  If in AWAY mode, tado will use the AwayConfiguration settings for this zone.
	// When true, the settings of this time block are always active, regardless of whether tado is in HOME or AWAY mode.
	GeolocationOverride *bool `json:"geolocationOverride,omitempty"`

	// Setting (temperature) settings for a zone which is used in scheduled TimeTableBlocks,  in ZoneOverlays (manual override for the scheduled setting), and in AwayConfiguration (settings to be used when the home is in AWAY mode).
	//
	// The applicable properties depend on the zone type and the zone capabilities.
	Setting *ZoneSetting `json:"setting,omitempty"`

	// Start start time of this block in 24 hour clock notation
	Start *string `json:"start,omitempty"`
}

// TimetableType defines model for TimetableType.
type TimetableType struct {
	// Id 0 = ONE_DAY, 1 = THREE_DAY, 2 = SEVEN_DAY
	Id *TimetableTypeId `json:"id,omitempty"`

	// Type Each zone has a schedule which controls the zone's (temperature) settings based on day of the week and time. Each schedule consists of three timetables, one for each timeTableType.  Only one timetable is active at anyone time.
	// The timetable type controls the granularity of `DayType`s used in the timetable:
	// * ONE_DAY = a timetable which support a single day type (MONDAY_TO_SUNDAY), used for every day of the week
	// * THREE_DAY = a timetable which supports 3 day types, one for MONDAY_TO_FRIDAY, one for SATURDAY and one for SUNDAY
	// * SEVEN_DAY = at timetable which supports 7 day types, one for every day of the week
	Type *TimetableTypeType `json:"type,omitempty"`
}

// TimetableTypeId 0 = ONE_DAY, 1 = THREE_DAY, 2 = SEVEN_DAY
type TimetableTypeId int

// TimetableTypeType Each zone has a schedule which controls the zone's (temperature) settings based on day of the week and time. Each schedule consists of three timetables, one for each timeTableType.  Only one timetable is active at anyone time.
// The timetable type controls the granularity of `DayType`s used in the timetable:
// * ONE_DAY = a timetable which support a single day type (MONDAY_TO_SUNDAY), used for every day of the week
// * THREE_DAY = a timetable which supports 3 day types, one for MONDAY_TO_FRIDAY, one for SATURDAY and one for SUNDAY
// * SEVEN_DAY = at timetable which supports 7 day types, one for every day of the week
type TimetableTypeType string

// UnderfloorHeating Element of HeatingSystem
type UnderfloorHeating struct {
	Present *bool `json:"present,omitempty"`
}

// User a user with a tado account
type User struct {
	Email *string `json:"email,omitempty"`

	// Homes the homes this user is linked to
	Homes *[]HomeBase `json:"homes,omitempty"`

	// Id globally unique user ID
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Locale language code for the user selected language in the Account settings part of the app
	Locale        *string         `json:"locale,omitempty"`
	MobileDevices *[]MobileDevice `json:"mobileDevices,omitempty"`
	Name          *string         `json:"name,omitempty"`
	Username      *string         `json:"username,omitempty"`
}

// VerticalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
type VerticalSwing string

// Weather Result of /homes/{homeId}/weather
type Weather struct {
	// OutsideTemperature Used in Weather and ZoneState, used to express outside or inside temperature.
	OutsideTemperature *TemperatureDataPoint `json:"outsideTemperature,omitempty"`

	// SolarIntensity Used in Weather and ZoneState, to express quantities like heating power, humidity and solar intensity.
	SolarIntensity *PercentageDataPoint `json:"solarIntensity,omitempty"`

	// WeatherState Used in Weather
	WeatherState *WeatherStateDataPoint `json:"weatherState,omitempty"`
}

// WeatherConditionDataInterval defines model for WeatherConditionDataInterval.
type WeatherConditionDataInterval struct {
	From  *time.Time `json:"from,omitempty"`
	To    *time.Time `json:"to,omitempty"`
	Value *struct {
		// State Used in DayReport and Weather
		State       *WeatherState `json:"state,omitempty"`
		Temperature *Temperature  `json:"temperature,omitempty"`
	} `json:"value,omitempty"`
}

// WeatherConditionTimeSeries Element of DayReport
type WeatherConditionTimeSeries struct {
	DataIntervals  *[]WeatherConditionDataInterval `json:"dataIntervals,omitempty"`
	TimeSeriesType *string                         `json:"timeSeriesType,omitempty"`
	ValueType      *string                         `json:"valueType,omitempty"`
}

// WeatherSlot Element of DayReport
type WeatherSlot struct {
	// State Used in DayReport and Weather
	State       *WeatherState `json:"state,omitempty"`
	Temperature *Temperature  `json:"temperature,omitempty"`
}

// WeatherSlotTimeSeries Element of DayReport
type WeatherSlotTimeSeries struct {
	Slots *struct {
		// N0400 Element of DayReport
		N0400 *WeatherSlot `json:"04:00,omitempty"`

		// N0800 Element of DayReport
		N0800 *WeatherSlot `json:"08:00,omitempty"`

		// N1200 Element of DayReport
		N1200 *WeatherSlot `json:"12:00,omitempty"`

		// N1600 Element of DayReport
		N1600 *WeatherSlot `json:"16:00,omitempty"`

		// N2000 Element of DayReport
		N2000 *WeatherSlot `json:"20:00,omitempty"`
	} `json:"slots,omitempty"`
	TimeSeriesType *string `json:"timeSeriesType,omitempty"`
	ValueType      *string `json:"valueType,omitempty"`
}

// WeatherState Used in DayReport and Weather
type WeatherState string

// WeatherStateDataPoint Used in Weather
type WeatherStateDataPoint struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Type      *string    `json:"type,omitempty"`

	// Value Used in DayReport and Weather
	Value *WeatherState `json:"value,omitempty"`
}

// Zone a room in a home whose temperature is controlled by tado
type Zone struct {
	DateCreated   *time.Time `json:"dateCreated,omitempty"`
	DazzleEnabled *bool      `json:"dazzleEnabled,omitempty"`
	DazzleMode    *struct {
		Enabled   *bool `json:"enabled,omitempty"`
		Supported *bool `json:"supported,omitempty"`
	} `json:"dazzleMode,omitempty"`
	DeviceTypes *[]DeviceType  `json:"deviceTypes,omitempty"`
	Devices     *[]DeviceExtra `json:"devices,omitempty"`

	// Id ID of a zone (unique only within the home it belongs to)
	Id *ZoneId `json:"id,omitempty"`

	// Name user assigned name
	Name                *string `json:"name,omitempty"`
	OpenWindowDetection *struct {
		Enabled          *bool `json:"enabled,omitempty"`
		Supported        *bool `json:"supported,omitempty"`
		TimeoutInSeconds *int  `json:"timeoutInSeconds,omitempty"`
	} `json:"openWindowDetection,omitempty"`
	ReportAvailable   *bool     `json:"reportAvailable,omitempty"`
	ShowScheduleSetup *bool     `json:"showScheduleSetup,omitempty"`
	SupportsDazzle    *bool     `json:"supportsDazzle,omitempty"`
	Type              *ZoneType `json:"type,omitempty"`
}

// ZoneAwayConfiguration Controls the (temperature) settings for a zone when the home the zone belongs to is in AWAY mode. The scheduled timetable settings are not used in such a situation.
// Used in /homes/{homeId}/zones/{zoneId}/awayConfiguration.
type ZoneAwayConfiguration struct {
	// AutoAdjust property present for zone type HEATING
	AutoAdjust *bool `json:"autoAdjust,omitempty"`

	// ComfortLevel property present for zone type HEATING
	ComfortLevel *string `json:"comfortLevel"`

	// Setting (temperature) settings for a zone which is used in scheduled TimeTableBlocks,  in ZoneOverlays (manual override for the scheduled setting), and in AwayConfiguration (settings to be used when the home is in AWAY mode).
	//
	// The applicable properties depend on the zone type and the zone capabilities.
	Setting *ZoneSetting `json:"setting,omitempty"`
	Type    *ZoneType    `json:"type,omitempty"`
}

// ZoneCapabilities The presence of the various properties depends on the ZoneType and capabilities of the zone who's capabilities are requested. E.g. `temperatures` will not be available for a HOT_WATER zone with `canSetTemperature: false`.
// Used in /homes/{homeId}/zones/{zoneId}/capabilities.
type ZoneCapabilities struct {
	// AUTO used in ZoneCapabilities for zones of type AIR_CONDITIONING
	AUTO *AirConditioningModeCapabilitiesBase `json:"AUTO,omitempty"`

	// COOL used in ZoneCapabilities for zones of type AIR_CONDITIONING
	COOL *AirConditioningModeCapabilities `json:"COOL,omitempty"`

	// DRY used in ZoneCapabilities for zones of type AIR_CONDITIONING
	DRY *AirConditioningModeCapabilities `json:"DRY,omitempty"`

	// FAN used in ZoneCapabilities for zones of type AIR_CONDITIONING
	FAN *AirConditioningModeCapabilities `json:"FAN,omitempty"`

	// HEAT used in ZoneCapabilities for zones of type AIR_CONDITIONING
	HEAT *AirConditioningModeCapabilities `json:"HEAT,omitempty"`

	// CanSetTemperature property available for zone type HOT_WATER
	CanSetTemperature *bool `json:"canSetTemperature,omitempty"`
	InitialStates     *struct {
		Mode  *AirConditioningMode `json:"mode,omitempty"`
		Modes *struct {
			// AUTO used in ZoneCapabilities for zones of type AIR_CONDITIONING
			AUTO *AirConditioningZoneSettingsBase `json:"AUTO,omitempty"`

			// COOL used in ZoneCapabilities for zones of type AIR_CONDITIONING
			COOL *AirConditioningZoneSettings `json:"COOL,omitempty"`

			// DRY used in ZoneCapabilities for zones of type AIR_CONDITIONING
			DRY *AirConditioningZoneSettings `json:"DRY,omitempty"`

			// FAN used in ZoneCapabilities for zones of type AIR_CONDITIONING
			FAN *AirConditioningZoneSettings `json:"FAN,omitempty"`

			// HEAT used in ZoneCapabilities for zones of type AIR_CONDITIONING
			HEAT *AirConditioningZoneSettings `json:"HEAT,omitempty"`
		} `json:"modes,omitempty"`
	} `json:"initialStates,omitempty"`

	// Temperatures property available for zone type HEATING
	Temperatures *TemperatureCapability `json:"temperatures,omitempty"`
	Type         *ZoneType              `json:"type,omitempty"`
}

// ZoneControl Result of /homes/{homeId}/zones/{zoneId}/control.
//
// Groups the devices in a given zone by their duty.
// The elements included in the result depend on the ZoneType:
// * AIR_CONDITIONING: _unknown_
// * HEATING: includes earlyStartEnabled, heatingCircuit, duties.leader, duties.drivers and duties.uis
// * HOT_WATER: includes duties.driver and duties.ui
type ZoneControl struct {
	Duties *struct {
		// Driver A piece of tado hardware
		//
		// Some of the properties are only available for certain device types.  Certain values for some properties are only applicable to certain device types.  Wherever device type specific information is known, it is documented.  But you cannot count on this information being fully complete.
		Driver  *Device   `json:"driver,omitempty"`
		Drivers *[]Device `json:"drivers,omitempty"`

		// Leader A piece of tado hardware
		//
		// Some of the properties are only available for certain device types.  Certain values for some properties are only applicable to certain device types.  Wherever device type specific information is known, it is documented.  But you cannot count on this information being fully complete.
		Leader  *Device   `json:"leader,omitempty"`
		Leaders *[]Device `json:"leaders,omitempty"`
		Type    *ZoneType `json:"type,omitempty"`

		// Ui A piece of tado hardware
		//
		// Some of the properties are only available for certain device types.  Certain values for some properties are only applicable to certain device types.  Wherever device type specific information is known, it is documented.  But you cannot count on this information being fully complete.
		Ui  *Device   `json:"ui,omitempty"`
		Uis *[]Device `json:"uis,omitempty"`
	} `json:"duties,omitempty"`

	// EarlyStartEnabled applicable for ZoneType HEATING
	EarlyStartEnabled *bool             `json:"earlyStartEnabled,omitempty"`
	HeatingCircuit    *HeatingCircuitId `json:"heatingCircuit,omitempty"`
	Type              *ZoneType         `json:"type,omitempty"`
}

// ZoneCreate Input for POST /home/{homeId}/zones
type ZoneCreate struct {
	Devices *[]struct {
		// SerialNo the serialNo of a tado device
		SerialNo *DeviceId `json:"serialNo,omitempty"`
	} `json:"devices,omitempty"`

	// Type known values: IMPLICIT_CONTROL
	Type     *string   `json:"type,omitempty"`
	ZoneType *ZoneType `json:"zoneType,omitempty"`
}

// ZoneDetailsInput Used in PUT /homes/{homeId}/zones/{zoneId}/details
type ZoneDetailsInput struct {
	Name *string `json:"name,omitempty"`
}

// ZoneId ID of a zone (unique only within the home it belongs to)
type ZoneId = int

// ZoneOpenWindow Open Window is set when Tado detects an open window in the zone. While Open Window is active, heating is switched off.
type ZoneOpenWindow struct {
	DetectedTime           *time.Time `json:"detectedTime,omitempty"`
	DurationInSeconds      *int       `json:"durationInSeconds,omitempty"`
	Expiry                 *time.Time `json:"expiry,omitempty"`
	RemainingTimeInSeconds *int       `json:"remainingTimeInSeconds,omitempty"`
}

// ZoneOverlay A zone overlay is a user controlled override for the user defined scheduled (temperature) settings of a zone. As long as a zone overlay is present for a zone, the zone's scheduled (temperature) settings do not take effect.
// Termination of the zone overlay (either never, a set time or when the next block in the active timetable starts)  is part of the zone overlay definition.
type ZoneOverlay struct {
	// Setting (temperature) settings for a zone which is used in scheduled TimeTableBlocks,  in ZoneOverlays (manual override for the scheduled setting), and in AwayConfiguration (settings to be used when the home is in AWAY mode).
	//
	// The applicable properties depend on the zone type and the zone capabilities.
	Setting *ZoneSetting `json:"setting,omitempty"`

	// Termination Defines if/how the overlay terminates.
	Termination *ZoneOverlayTermination `json:"termination,omitempty"`

	// Type Type of a ZoneOverlay. Only known value is MANUAL, but not entirely sure, so no enum
	Type *ZoneOverlayType `json:"type,omitempty"`
}

// ZoneOverlayTermination Defines if/how the overlay terminates.
type ZoneOverlayTermination struct {
	// DurationInSeconds applicable when termination.type = TIMER
	DurationInSeconds *int `json:"durationInSeconds,omitempty"`

	// Expiry applicable when termination.type = TIMER
	Expiry *time.Time `json:"expiry"`

	// ProjectedExpiry applicable when termination.type = TIMER
	ProjectedExpiry *time.Time `json:"projectedExpiry"`

	// RemainingTimeInSeconds applicable when termination.type = TIMER
	RemainingTimeInSeconds *int `json:"remainingTimeInSeconds,omitempty"`

	// Type Element of a zone overlay.
	// Does not contain NEXT_TIME_BLOCK which is present in the ZoneOverlayTerminationTypeSkillBasedApp enum.
	// Value descriptions:
	// * MANUAL: the (temperature) settings in the ZoneOverlay will last indefinitely
	// * TIMER: the (temperature) settings in the ZoneOverlay will last for a fixed number of seconds,  starting at the moment the ZoneOverlay was set (requires setting durationInSeconds as well)
	// * TADO_MODE: the (temperature) settings in the ZoneOverlay will last until the next time block in the active timetable starts
	Type *ZoneOverlayTerminationType `json:"type,omitempty"`

	// TypeSkillBasedApp When setting a ZoneOverlay this value is used to specify until when the ZoneOverlay should be active.
	//
	// Compared to ZoneOverlayTerminationType it contains NEXT_TIME_BLOCK as an extra value.
	//
	// Value descriptions:
	// * MANUAL: the (temperature) settings in the ZoneOverlay will last indefinitely
	// * TIMER: the (temperature) settings in the ZoneOverlay will last for a fixed number of seconds,  starting at the moment the ZoneOverlay was set (requires setting durationInSeconds as well)
	// * TADO_MODE and NEXT_TIME_BLOCK: the (temperature) settings in the ZoneOverlay will last until the next time block in the active timetable starts
	//
	// NEXT_TIME_BLOCK could be a deprecated value. The app features which allow a user to set an ZoneOverlay (or a DefaultZoneOverlay) only offer options that translate into MANUAL, TIMER or TADO_MODE.
	TypeSkillBasedApp *ZoneOverlayTerminationTypeSkillBasedApp `json:"typeSkillBasedApp,omitempty"`
}

// ZoneOverlayTerminationType Element of a zone overlay.
// Does not contain NEXT_TIME_BLOCK which is present in the ZoneOverlayTerminationTypeSkillBasedApp enum.
// Value descriptions:
// * MANUAL: the (temperature) settings in the ZoneOverlay will last indefinitely
// * TIMER: the (temperature) settings in the ZoneOverlay will last for a fixed number of seconds,  starting at the moment the ZoneOverlay was set (requires setting durationInSeconds as well)
// * TADO_MODE: the (temperature) settings in the ZoneOverlay will last until the next time block in the active timetable starts
type ZoneOverlayTerminationType string

// ZoneOverlayTerminationTypeSkillBasedApp When setting a ZoneOverlay this value is used to specify until when the ZoneOverlay should be active.
//
// Compared to ZoneOverlayTerminationType it contains NEXT_TIME_BLOCK as an extra value.
//
// Value descriptions:
// * MANUAL: the (temperature) settings in the ZoneOverlay will last indefinitely
// * TIMER: the (temperature) settings in the ZoneOverlay will last for a fixed number of seconds,  starting at the moment the ZoneOverlay was set (requires setting durationInSeconds as well)
// * TADO_MODE and NEXT_TIME_BLOCK: the (temperature) settings in the ZoneOverlay will last until the next time block in the active timetable starts
//
// NEXT_TIME_BLOCK could be a deprecated value. The app features which allow a user to set an ZoneOverlay (or a DefaultZoneOverlay) only offer options that translate into MANUAL, TIMER or TADO_MODE.
type ZoneOverlayTerminationTypeSkillBasedApp string

// ZoneOverlayType Type of a ZoneOverlay. Only known value is MANUAL, but not entirely sure, so no enum
type ZoneOverlayType = string

// ZoneOverlays input for POST /homes/{homeId}/overlay
type ZoneOverlays struct {
	Overlays *[]struct {
		// Overlay A zone overlay is a user controlled override for the user defined scheduled (temperature) settings of a zone. As long as a zone overlay is present for a zone, the zone's scheduled (temperature) settings do not take effect.
		// Termination of the zone overlay (either never, a set time or when the next block in the active timetable starts)  is part of the zone overlay definition.
		Overlay *ZoneOverlay `json:"overlay,omitempty"`

		// Room Type of a ZoneOverlay. Only known value is MANUAL, but not entirely sure, so no enum
		Room *ZoneOverlayType `json:"room,omitempty"`
	} `json:"overlays,omitempty"`
}

// ZoneSetting defines model for ZoneSetting.
type ZoneSetting struct {
	// FanLevel Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	FanLevel *FanLevel `json:"fanLevel,omitempty"`

	// HorizontalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	HorizontalSwing *HorizontalSwing `json:"horizontalSwing,omitempty"`

	// Light Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	Light *Light               `json:"light,omitempty"`
	Mode  *AirConditioningMode `json:"mode,omitempty"`

	// Power used in ZoneSetting
	Power       *Power       `json:"power,omitempty"`
	Temperature *Temperature `json:"temperature,omitempty"`
	Type        *ZoneType    `json:"type,omitempty"`

	// VerticalSwing Used in AirConditioningZoneSettingsBase and AirConditioningModeCapabilitiesBase
	VerticalSwing *VerticalSwing `json:"verticalSwing,omitempty"`
}

// ZoneState Result of /homes/{homeId}/zone/{zoneId}/state
type ZoneState struct {
	// ActivityDataPoints Part of ZoneState. Empty for a HOT_WATER zone
	ActivityDataPoints             *ActivityDataPoints `json:"activityDataPoints,omitempty"`
	GeolocationOverride            *bool               `json:"geolocationOverride,omitempty"`
	GeolocationOverrideDisableTime *interface{}        `json:"geolocationOverrideDisableTime"`
	Link                           *struct {
		// State known values:
		// * ONLINE
		State *string `json:"state,omitempty"`
	} `json:"link,omitempty"`
	NextScheduleChange *struct {
		// Setting (temperature) settings for a zone which is used in scheduled TimeTableBlocks,  in ZoneOverlays (manual override for the scheduled setting), and in AwayConfiguration (settings to be used when the home is in AWAY mode).
		//
		// The applicable properties depend on the zone type and the zone capabilities.
		Setting *ZoneSetting `json:"setting,omitempty"`
		Start   *time.Time   `json:"start,omitempty"`
	} `json:"nextScheduleChange"`
	NextTimeBlock *struct {
		Start *time.Time `json:"start,omitempty"`
	} `json:"nextTimeBlock,omitempty"`

	// OpenWindow Open Window is set when Tado detects an open window in the zone. While Open Window is active, heating is switched off.
	OpenWindow *ZoneOpenWindow `json:"openWindow,omitempty"`

	// Overlay A zone overlay is a user controlled override for the user defined scheduled (temperature) settings of a zone. As long as a zone overlay is present for a zone, the zone's scheduled (temperature) settings do not take effect.
	// Termination of the zone overlay (either never, a set time or when the next block in the active timetable starts)  is part of the zone overlay definition.
	Overlay *ZoneOverlay `json:"overlay,omitempty"`

	// OverlayType Type of a ZoneOverlay. Only known value is MANUAL, but not entirely sure, so no enum
	OverlayType            *ZoneOverlayType `json:"overlayType,omitempty"`
	Preparation            *interface{}     `json:"preparation"`
	RunningOfflineSchedule *bool            `json:"runningOfflineSchedule,omitempty"`

	// SensorDataPoints Element of ZoneState. Empty for a HOT_WATER zone
	SensorDataPoints *SensorDataPoints `json:"sensorDataPoints,omitempty"`

	// Setting (temperature) settings for a zone which is used in scheduled TimeTableBlocks,  in ZoneOverlays (manual override for the scheduled setting), and in AwayConfiguration (settings to be used when the home is in AWAY mode).
	//
	// The applicable properties depend on the zone type and the zone capabilities.
	Setting  *ZoneSetting  `json:"setting,omitempty"`
	TadoMode *HomePresence `json:"tadoMode,omitempty"`
}

// ZoneStates Result of /homes/{homeId}/zoneStates. Basically a map with a zoneID as key and ZoneState as value.
type ZoneStates struct {
	// ZoneStates a dictionary with zone IDs (a.k.a. room IDs) as keys
	ZoneStates *map[string]ZoneState `json:"zoneStates,omitempty"`
}

// ZoneType defines model for ZoneType.
type ZoneType string

// AccessDenied403 error object returned for non-200 responses
type AccessDenied403 = ErrorResponse

// InputError422 error object returned for 422 responses
type InputError422 = ErrorResponse422

// NotFound404 error object returned for non-200 responses
type NotFound404 = ErrorResponse

// Unauthorized401 error object returned for non-200 responses
type Unauthorized401 = ErrorResponse

// DeleteMobileDeviceFromHomeParams defines parameters for DeleteMobileDeviceFromHome.
type DeleteMobileDeviceFromHomeParams struct {
	// ContentType Strangely enough a 'Content-Type' header with value 'application/json'  is mandatory for this specific endpoint. No other endpoint requires it.
	ContentType string `json:"Content-Type"`
}

// DeleteZoneOverlaysParams defines parameters for DeleteZoneOverlays.
type DeleteZoneOverlaysParams struct {
	// Rooms list of zone IDs whose overlay should be removed (do not include a HOT_WATER zone ID)
	Rooms []ZoneId `form:"rooms" json:"rooms"`
}

// CreateZoneParams defines parameters for CreateZone.
type CreateZoneParams struct {
	// Force To be investigated further.  'true' seems to indicate that the zone the device belonged to previously should be deleted.
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// GetZoneDayReportParams defines parameters for GetZoneDayReport.
type GetZoneDayReportParams struct {
	Date openapi_types.Date `form:"date" json:"date"`
}

// MoveDeviceJSONBody defines parameters for MoveDevice.
type MoveDeviceJSONBody struct {
	// SerialNo the serialNo of a tado device
	SerialNo *DeviceId `json:"serialNo,omitempty"`
}

// MoveDeviceParams defines parameters for MoveDevice.
type MoveDeviceParams struct {
	// Force To be investigated further.  'true' seems to indicate that the zone the device belonged to previously should be deleted.
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// SetZoneMeasuringDeviceJSONBody defines parameters for SetZoneMeasuringDevice.
type SetZoneMeasuringDeviceJSONBody struct {
	// SerialNo the serialNo of a tado device
	SerialNo *DeviceId `json:"serialNo,omitempty"`
}

// SetTimetableBlocksForDayTypeJSONBody defines parameters for SetTimetableBlocksForDayType.
type SetTimetableBlocksForDayTypeJSONBody = []TimetableBlock

// SetTemperatureOffsetJSONRequestBody defines body for SetTemperatureOffset for application/json ContentType.
type SetTemperatureOffsetJSONRequestBody = Temperature

// SetAwayRadiusInMetersJSONRequestBody defines body for SetAwayRadiusInMeters for application/json ContentType.
type SetAwayRadiusInMetersJSONRequestBody = AwayRadiusInput

// SetHomeDetailsJSONRequestBody defines body for SetHomeDetails for application/json ContentType.
type SetHomeDetailsJSONRequestBody = HomeDetails

// SetBoilerJSONRequestBody defines body for SetBoiler for application/json ContentType.
type SetBoilerJSONRequestBody = Boiler

// SetUnderfloorHeatingJSONRequestBody defines body for SetUnderfloorHeating for application/json ContentType.
type SetUnderfloorHeatingJSONRequestBody = UnderfloorHeating

// SetIncidentDetectionJSONRequestBody defines body for SetIncidentDetection for application/json ContentType.
type SetIncidentDetectionJSONRequestBody = IncidentDetectionInput

// SetMobileDeviceSettingsJSONRequestBody defines body for SetMobileDeviceSettings for application/json ContentType.
type SetMobileDeviceSettingsJSONRequestBody = MobileDeviceSettings

// SetZoneOverlaysJSONRequestBody defines body for SetZoneOverlays for application/json ContentType.
type SetZoneOverlaysJSONRequestBody = ZoneOverlays

// SetPresenceLockJSONRequestBody defines body for SetPresenceLock for application/json ContentType.
type SetPresenceLockJSONRequestBody = PresenceLock

// CreateZoneJSONRequestBody defines body for CreateZone for application/json ContentType.
type CreateZoneJSONRequestBody = ZoneCreate

// SetHeatingCircuitJSONRequestBody defines body for SetHeatingCircuit for application/json ContentType.
type SetHeatingCircuitJSONRequestBody = HeatingCircuitInput

// SetDazzleJSONRequestBody defines body for SetDazzle for application/json ContentType.
type SetDazzleJSONRequestBody = DazzleInput

// SetDefaultZoneOverlayJSONRequestBody defines body for SetDefaultZoneOverlay for application/json ContentType.
type SetDefaultZoneOverlayJSONRequestBody = DefaultZoneOverlay

// SetDetailsJSONRequestBody defines body for SetDetails for application/json ContentType.
type SetDetailsJSONRequestBody = ZoneDetailsInput

// MoveDeviceJSONRequestBody defines body for MoveDevice for application/json ContentType.
type MoveDeviceJSONRequestBody MoveDeviceJSONBody

// SetEarlyStartJSONRequestBody defines body for SetEarlyStart for application/json ContentType.
type SetEarlyStartJSONRequestBody = EarlyStart

// SetZoneMeasuringDeviceJSONRequestBody defines body for SetZoneMeasuringDevice for application/json ContentType.
type SetZoneMeasuringDeviceJSONRequestBody SetZoneMeasuringDeviceJSONBody

// SetOpenWindowDetectionJSONRequestBody defines body for SetOpenWindowDetection for application/json ContentType.
type SetOpenWindowDetectionJSONRequestBody = OpenWindowDetectionInput

// SetZoneOverlayJSONRequestBody defines body for SetZoneOverlay for application/json ContentType.
type SetZoneOverlayJSONRequestBody = ZoneOverlay

// SetActiveTimetableTypeJSONRequestBody defines body for SetActiveTimetableType for application/json ContentType.
type SetActiveTimetableTypeJSONRequestBody = TimetableType

// SetAwayConfigurationJSONRequestBody defines body for SetAwayConfiguration for application/json ContentType.
type SetAwayConfigurationJSONRequestBody = ZoneAwayConfiguration

// SetTimetableBlocksForDayTypeJSONRequestBody defines body for SetTimetableBlocksForDayType for application/json ContentType.
type SetTimetableBlocksForDayTypeJSONRequestBody = SetTimetableBlocksForDayTypeJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDevice request
	GetDevice(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IdentifyDevice request
	IdentifyDevice(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTemperatureOffset request
	GetTemperatureOffset(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTemperatureOffsetWithBody request with any body
	SetTemperatureOffsetWithBody(ctx context.Context, deviceId DeviceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTemperatureOffset(ctx context.Context, deviceId DeviceId, body SetTemperatureOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHome request
	GetHome(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAirComfort request
	GetAirComfort(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAwayRadiusInMetersWithBody request with any body
	SetAwayRadiusInMetersWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAwayRadiusInMeters(ctx context.Context, homeId HomeId, body SetAwayRadiusInMetersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetHomeDetailsWithBody request with any body
	SetHomeDetailsWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetHomeDetails(ctx context.Context, homeId HomeId, body SetHomeDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceList request
	GetDeviceList(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDevices request
	GetDevices(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeatingCircuits request
	GetHeatingCircuits(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeatingSystem request
	GetHeatingSystem(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetBoilerWithBody request with any body
	SetBoilerWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetBoiler(ctx context.Context, homeId HomeId, body SetBoilerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUnderfloorHeatingWithBody request with any body
	SetUnderfloorHeatingWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUnderfloorHeating(ctx context.Context, homeId HomeId, body SetUnderfloorHeatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentDetection request
	GetIncidentDetection(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetIncidentDetectionWithBody request with any body
	SetIncidentDetectionWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetIncidentDetection(ctx context.Context, homeId HomeId, body SetIncidentDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstallations request
	GetInstallations(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMobileDevices request
	GetMobileDevices(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMobileDeviceFromHome request
	DeleteMobileDeviceFromHome(ctx context.Context, homeId HomeId, mobileDeviceId int64, params *DeleteMobileDeviceFromHomeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMobileDevice request
	GetMobileDevice(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMobileDeviceSettings request
	GetMobileDeviceSettings(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetMobileDeviceSettingsWithBody request with any body
	SetMobileDeviceSettingsWithBody(ctx context.Context, homeId HomeId, mobileDeviceId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetMobileDeviceSettings(ctx context.Context, homeId HomeId, mobileDeviceId int64, body SetMobileDeviceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteZoneOverlays request
	DeleteZoneOverlays(ctx context.Context, homeId HomeId, params *DeleteZoneOverlaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetZoneOverlaysWithBody request with any body
	SetZoneOverlaysWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetZoneOverlays(ctx context.Context, homeId HomeId, body SetZoneOverlaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePresenceLock request
	DeletePresenceLock(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetPresenceLockWithBody request with any body
	SetPresenceLockWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetPresenceLock(ctx context.Context, homeId HomeId, body SetPresenceLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeState request
	GetHomeState(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWeather request
	GetWeather(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneStates request
	GetZoneStates(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZones request
	GetZones(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateZoneWithBody request with any body
	CreateZoneWithBody(ctx context.Context, homeId HomeId, params *CreateZoneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateZone(ctx context.Context, homeId HomeId, params *CreateZoneParams, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneCapabilities request
	GetZoneCapabilities(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneControl request
	GetZoneControl(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetHeatingCircuitWithBody request with any body
	SetHeatingCircuitWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetHeatingCircuit(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetHeatingCircuitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneDayReport request
	GetZoneDayReport(ctx context.Context, homeId HomeId, zoneId ZoneId, params *GetZoneDayReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDazzleWithBody request with any body
	SetDazzleWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetDazzle(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDazzleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultZoneOverlay request
	GetDefaultZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDefaultZoneOverlayWithBody request with any body
	SetDefaultZoneOverlayWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetDefaultZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDefaultZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDetailsWithBody request with any body
	SetDetailsWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetDetails(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveDeviceWithBody request with any body
	MoveDeviceWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveDevice(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, body MoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEarlyStart request
	GetEarlyStart(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetEarlyStartWithBody request with any body
	SetEarlyStartWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetEarlyStart(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetEarlyStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneMeasuringDevice request
	GetZoneMeasuringDevice(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetZoneMeasuringDeviceWithBody request with any body
	SetZoneMeasuringDeviceWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetZoneMeasuringDevice(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneMeasuringDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetOpenWindowDetectionWithBody request with any body
	SetOpenWindowDetectionWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetOpenWindowDetection(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetOpenWindowDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteZoneOverlay request
	DeleteZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneOverlay request
	GetZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetZoneOverlayWithBody request with any body
	SetZoneOverlayWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveTimetableType request
	GetActiveTimetableType(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetActiveTimetableTypeWithBody request with any body
	SetActiveTimetableTypeWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetActiveTimetableType(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetActiveTimetableTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwayConfiguration request
	GetAwayConfiguration(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAwayConfigurationWithBody request with any body
	SetAwayConfigurationWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAwayConfiguration(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetAwayConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneTimetables request
	GetZoneTimetables(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneTimetable request
	GetZoneTimetable(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneTimetableBlocks request
	GetZoneTimetableBlocks(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimetableBlocksByDayType request
	GetTimetableBlocksByDayType(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTimetableBlocksForDayTypeWithBody request with any body
	SetTimetableBlocksForDayTypeWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTimetableBlocksForDayType(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, body SetTimetableBlocksForDayTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoneState request
	GetZoneState(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDevice(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IdentifyDevice(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentifyDeviceRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemperatureOffset(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTemperatureOffsetRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTemperatureOffsetWithBody(ctx context.Context, deviceId DeviceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTemperatureOffsetRequestWithBody(c.Server, deviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTemperatureOffset(ctx context.Context, deviceId DeviceId, body SetTemperatureOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTemperatureOffsetRequest(c.Server, deviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHome(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAirComfort(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAirComfortRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAwayRadiusInMetersWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAwayRadiusInMetersRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAwayRadiusInMeters(ctx context.Context, homeId HomeId, body SetAwayRadiusInMetersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAwayRadiusInMetersRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetHomeDetailsWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetHomeDetailsRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetHomeDetails(ctx context.Context, homeId HomeId, body SetHomeDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetHomeDetailsRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceList(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceListRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDevices(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDevicesRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeatingCircuits(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeatingCircuitsRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeatingSystem(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeatingSystemRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetBoilerWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetBoilerRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetBoiler(ctx context.Context, homeId HomeId, body SetBoilerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetBoilerRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUnderfloorHeatingWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUnderfloorHeatingRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUnderfloorHeating(ctx context.Context, homeId HomeId, body SetUnderfloorHeatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUnderfloorHeatingRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentDetection(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentDetectionRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIncidentDetectionWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIncidentDetectionRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIncidentDetection(ctx context.Context, homeId HomeId, body SetIncidentDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIncidentDetectionRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstallations(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstallationsRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMobileDevices(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMobileDevicesRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMobileDeviceFromHome(ctx context.Context, homeId HomeId, mobileDeviceId int64, params *DeleteMobileDeviceFromHomeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMobileDeviceFromHomeRequest(c.Server, homeId, mobileDeviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMobileDevice(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMobileDeviceRequest(c.Server, homeId, mobileDeviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMobileDeviceSettings(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMobileDeviceSettingsRequest(c.Server, homeId, mobileDeviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetMobileDeviceSettingsWithBody(ctx context.Context, homeId HomeId, mobileDeviceId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetMobileDeviceSettingsRequestWithBody(c.Server, homeId, mobileDeviceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetMobileDeviceSettings(ctx context.Context, homeId HomeId, mobileDeviceId int64, body SetMobileDeviceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetMobileDeviceSettingsRequest(c.Server, homeId, mobileDeviceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZoneOverlays(ctx context.Context, homeId HomeId, params *DeleteZoneOverlaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZoneOverlaysRequest(c.Server, homeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetZoneOverlaysWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetZoneOverlaysRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetZoneOverlays(ctx context.Context, homeId HomeId, body SetZoneOverlaysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetZoneOverlaysRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePresenceLock(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePresenceLockRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetPresenceLockWithBody(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetPresenceLockRequestWithBody(c.Server, homeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetPresenceLock(ctx context.Context, homeId HomeId, body SetPresenceLockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetPresenceLockRequest(c.Server, homeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeState(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeStateRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWeather(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWeatherRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneStates(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneStatesRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZones(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZonesRequest(c.Server, homeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZoneWithBody(ctx context.Context, homeId HomeId, params *CreateZoneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateZoneRequestWithBody(c.Server, homeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateZone(ctx context.Context, homeId HomeId, params *CreateZoneParams, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateZoneRequest(c.Server, homeId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneCapabilities(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneCapabilitiesRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneControl(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneControlRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetHeatingCircuitWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetHeatingCircuitRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetHeatingCircuit(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetHeatingCircuitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetHeatingCircuitRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneDayReport(ctx context.Context, homeId HomeId, zoneId ZoneId, params *GetZoneDayReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneDayReportRequest(c.Server, homeId, zoneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDazzleWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDazzleRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDazzle(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDazzleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDazzleRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultZoneOverlayRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefaultZoneOverlayWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefaultZoneOverlayRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefaultZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDefaultZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefaultZoneOverlayRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDetailsWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDetailsRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDetails(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDetailsRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveDeviceWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveDeviceRequestWithBody(c.Server, homeId, zoneId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveDevice(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, body MoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveDeviceRequest(c.Server, homeId, zoneId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEarlyStart(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEarlyStartRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetEarlyStartWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetEarlyStartRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetEarlyStart(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetEarlyStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetEarlyStartRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneMeasuringDevice(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneMeasuringDeviceRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetZoneMeasuringDeviceWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetZoneMeasuringDeviceRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetZoneMeasuringDevice(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneMeasuringDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetZoneMeasuringDeviceRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetOpenWindowDetectionWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetOpenWindowDetectionRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetOpenWindowDetection(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetOpenWindowDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetOpenWindowDetectionRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteZoneOverlayRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneOverlayRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetZoneOverlayWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetZoneOverlayRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetZoneOverlay(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetZoneOverlayRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveTimetableType(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveTimetableTypeRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetActiveTimetableTypeWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetActiveTimetableTypeRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetActiveTimetableType(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetActiveTimetableTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetActiveTimetableTypeRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwayConfiguration(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwayConfigurationRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAwayConfigurationWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAwayConfigurationRequestWithBody(c.Server, homeId, zoneId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAwayConfiguration(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetAwayConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAwayConfigurationRequest(c.Server, homeId, zoneId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTimetables(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTimetablesRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTimetable(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTimetableRequest(c.Server, homeId, zoneId, timetableTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneTimetableBlocks(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneTimetableBlocksRequest(c.Server, homeId, zoneId, timetableTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimetableBlocksByDayType(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimetableBlocksByDayTypeRequest(c.Server, homeId, zoneId, timetableTypeId, dayType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTimetableBlocksForDayTypeWithBody(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTimetableBlocksForDayTypeRequestWithBody(c.Server, homeId, zoneId, timetableTypeId, dayType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTimetableBlocksForDayType(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, body SetTimetableBlocksForDayTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTimetableBlocksForDayTypeRequest(c.Server, homeId, zoneId, timetableTypeId, dayType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoneState(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoneStateRequest(c.Server, homeId, zoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDeviceRequest generates requests for GetDevice
func NewGetDeviceRequest(server string, deviceId DeviceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIdentifyDeviceRequest generates requests for IdentifyDevice
func NewIdentifyDeviceRequest(server string, deviceId DeviceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s/identify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTemperatureOffsetRequest generates requests for GetTemperatureOffset
func NewGetTemperatureOffsetRequest(server string, deviceId DeviceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s/temperatureOffset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetTemperatureOffsetRequest calls the generic SetTemperatureOffset builder with application/json body
func NewSetTemperatureOffsetRequest(server string, deviceId DeviceId, body SetTemperatureOffsetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTemperatureOffsetRequestWithBody(server, deviceId, "application/json", bodyReader)
}

// NewSetTemperatureOffsetRequestWithBody generates requests for SetTemperatureOffset with any type of body
func NewSetTemperatureOffsetRequestWithBody(server string, deviceId DeviceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s/temperatureOffset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHomeRequest generates requests for GetHome
func NewGetHomeRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAirComfortRequest generates requests for GetAirComfort
func NewGetAirComfortRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/airComfort", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetAwayRadiusInMetersRequest calls the generic SetAwayRadiusInMeters builder with application/json body
func NewSetAwayRadiusInMetersRequest(server string, homeId HomeId, body SetAwayRadiusInMetersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAwayRadiusInMetersRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetAwayRadiusInMetersRequestWithBody generates requests for SetAwayRadiusInMeters with any type of body
func NewSetAwayRadiusInMetersRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/awayRadiusInMeters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetHomeDetailsRequest calls the generic SetHomeDetails builder with application/json body
func NewSetHomeDetailsRequest(server string, homeId HomeId, body SetHomeDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetHomeDetailsRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetHomeDetailsRequestWithBody generates requests for SetHomeDetails with any type of body
func NewSetHomeDetailsRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeviceListRequest generates requests for GetDeviceList
func NewGetDeviceListRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/deviceList", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDevicesRequest generates requests for GetDevices
func NewGetDevicesRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeatingCircuitsRequest generates requests for GetHeatingCircuits
func NewGetHeatingCircuitsRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/heatingCircuits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeatingSystemRequest generates requests for GetHeatingSystem
func NewGetHeatingSystemRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/heatingSystem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetBoilerRequest calls the generic SetBoiler builder with application/json body
func NewSetBoilerRequest(server string, homeId HomeId, body SetBoilerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetBoilerRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetBoilerRequestWithBody generates requests for SetBoiler with any type of body
func NewSetBoilerRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/heatingSystem/boiler", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetUnderfloorHeatingRequest calls the generic SetUnderfloorHeating builder with application/json body
func NewSetUnderfloorHeatingRequest(server string, homeId HomeId, body SetUnderfloorHeatingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUnderfloorHeatingRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetUnderfloorHeatingRequestWithBody generates requests for SetUnderfloorHeating with any type of body
func NewSetUnderfloorHeatingRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/heatingSystem/underfloorHeating", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentDetectionRequest generates requests for GetIncidentDetection
func NewGetIncidentDetectionRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/incidentDetection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetIncidentDetectionRequest calls the generic SetIncidentDetection builder with application/json body
func NewSetIncidentDetectionRequest(server string, homeId HomeId, body SetIncidentDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetIncidentDetectionRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetIncidentDetectionRequestWithBody generates requests for SetIncidentDetection with any type of body
func NewSetIncidentDetectionRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/incidentDetection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstallationsRequest generates requests for GetInstallations
func NewGetInstallationsRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/installations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMobileDevicesRequest generates requests for GetMobileDevices
func NewGetMobileDevicesRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/mobileDevices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMobileDeviceFromHomeRequest generates requests for DeleteMobileDeviceFromHome
func NewDeleteMobileDeviceFromHomeRequest(server string, homeId HomeId, mobileDeviceId int64, params *DeleteMobileDeviceFromHomeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mobileDeviceId", runtime.ParamLocationPath, mobileDeviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/mobileDevices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

// NewGetMobileDeviceRequest generates requests for GetMobileDevice
func NewGetMobileDeviceRequest(server string, homeId HomeId, mobileDeviceId MobileDeviceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mobileDeviceId", runtime.ParamLocationPath, mobileDeviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/mobileDevices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMobileDeviceSettingsRequest generates requests for GetMobileDeviceSettings
func NewGetMobileDeviceSettingsRequest(server string, homeId HomeId, mobileDeviceId MobileDeviceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mobileDeviceId", runtime.ParamLocationPath, mobileDeviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/mobileDevices/%s/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetMobileDeviceSettingsRequest calls the generic SetMobileDeviceSettings builder with application/json body
func NewSetMobileDeviceSettingsRequest(server string, homeId HomeId, mobileDeviceId int64, body SetMobileDeviceSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetMobileDeviceSettingsRequestWithBody(server, homeId, mobileDeviceId, "application/json", bodyReader)
}

// NewSetMobileDeviceSettingsRequestWithBody generates requests for SetMobileDeviceSettings with any type of body
func NewSetMobileDeviceSettingsRequestWithBody(server string, homeId HomeId, mobileDeviceId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mobileDeviceId", runtime.ParamLocationPath, mobileDeviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/mobileDevices/%s/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteZoneOverlaysRequest generates requests for DeleteZoneOverlays
func NewDeleteZoneOverlaysRequest(server string, homeId HomeId, params *DeleteZoneOverlaysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/overlay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rooms", runtime.ParamLocationQuery, params.Rooms); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetZoneOverlaysRequest calls the generic SetZoneOverlays builder with application/json body
func NewSetZoneOverlaysRequest(server string, homeId HomeId, body SetZoneOverlaysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetZoneOverlaysRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetZoneOverlaysRequestWithBody generates requests for SetZoneOverlays with any type of body
func NewSetZoneOverlaysRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/overlay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePresenceLockRequest generates requests for DeletePresenceLock
func NewDeletePresenceLockRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/presenceLock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetPresenceLockRequest calls the generic SetPresenceLock builder with application/json body
func NewSetPresenceLockRequest(server string, homeId HomeId, body SetPresenceLockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetPresenceLockRequestWithBody(server, homeId, "application/json", bodyReader)
}

// NewSetPresenceLockRequestWithBody generates requests for SetPresenceLock with any type of body
func NewSetPresenceLockRequestWithBody(server string, homeId HomeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/presenceLock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHomeStateRequest generates requests for GetHomeState
func NewGetHomeStateRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWeatherRequest generates requests for GetWeather
func NewGetWeatherRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/weather", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneStatesRequest generates requests for GetZoneStates
func NewGetZoneStatesRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zoneStates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZonesRequest generates requests for GetZones
func NewGetZonesRequest(server string, homeId HomeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateZoneRequest calls the generic CreateZone builder with application/json body
func NewCreateZoneRequest(server string, homeId HomeId, params *CreateZoneParams, body CreateZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateZoneRequestWithBody(server, homeId, params, "application/json", bodyReader)
}

// NewCreateZoneRequestWithBody generates requests for CreateZone with any type of body
func NewCreateZoneRequestWithBody(server string, homeId HomeId, params *CreateZoneParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneCapabilitiesRequest generates requests for GetZoneCapabilities
func NewGetZoneCapabilitiesRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/capabilities", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneControlRequest generates requests for GetZoneControl
func NewGetZoneControlRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/control", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetHeatingCircuitRequest calls the generic SetHeatingCircuit builder with application/json body
func NewSetHeatingCircuitRequest(server string, homeId HomeId, zoneId ZoneId, body SetHeatingCircuitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetHeatingCircuitRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetHeatingCircuitRequestWithBody generates requests for SetHeatingCircuit with any type of body
func NewSetHeatingCircuitRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/control/heatingCircuit", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneDayReportRequest generates requests for GetZoneDayReport
func NewGetZoneDayReportRequest(server string, homeId HomeId, zoneId ZoneId, params *GetZoneDayReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/dayReport", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetDazzleRequest calls the generic SetDazzle builder with application/json body
func NewSetDazzleRequest(server string, homeId HomeId, zoneId ZoneId, body SetDazzleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetDazzleRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetDazzleRequestWithBody generates requests for SetDazzle with any type of body
func NewSetDazzleRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/dazzle", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultZoneOverlayRequest generates requests for GetDefaultZoneOverlay
func NewGetDefaultZoneOverlayRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/defaultOverlay", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetDefaultZoneOverlayRequest calls the generic SetDefaultZoneOverlay builder with application/json body
func NewSetDefaultZoneOverlayRequest(server string, homeId HomeId, zoneId ZoneId, body SetDefaultZoneOverlayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetDefaultZoneOverlayRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetDefaultZoneOverlayRequestWithBody generates requests for SetDefaultZoneOverlay with any type of body
func NewSetDefaultZoneOverlayRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/defaultOverlay", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetDetailsRequest calls the generic SetDetails builder with application/json body
func NewSetDetailsRequest(server string, homeId HomeId, zoneId ZoneId, body SetDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetDetailsRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetDetailsRequestWithBody generates requests for SetDetails with any type of body
func NewSetDetailsRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/details", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveDeviceRequest calls the generic MoveDevice builder with application/json body
func NewMoveDeviceRequest(server string, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, body MoveDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveDeviceRequestWithBody(server, homeId, zoneId, params, "application/json", bodyReader)
}

// NewMoveDeviceRequestWithBody generates requests for MoveDevice with any type of body
func NewMoveDeviceRequestWithBody(server string, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/devices", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEarlyStartRequest generates requests for GetEarlyStart
func NewGetEarlyStartRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/earlyStart", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetEarlyStartRequest calls the generic SetEarlyStart builder with application/json body
func NewSetEarlyStartRequest(server string, homeId HomeId, zoneId ZoneId, body SetEarlyStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetEarlyStartRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetEarlyStartRequestWithBody generates requests for SetEarlyStart with any type of body
func NewSetEarlyStartRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/earlyStart", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneMeasuringDeviceRequest generates requests for GetZoneMeasuringDevice
func NewGetZoneMeasuringDeviceRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/measuringDevice", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetZoneMeasuringDeviceRequest calls the generic SetZoneMeasuringDevice builder with application/json body
func NewSetZoneMeasuringDeviceRequest(server string, homeId HomeId, zoneId ZoneId, body SetZoneMeasuringDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetZoneMeasuringDeviceRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetZoneMeasuringDeviceRequestWithBody generates requests for SetZoneMeasuringDevice with any type of body
func NewSetZoneMeasuringDeviceRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/measuringDevice", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetOpenWindowDetectionRequest calls the generic SetOpenWindowDetection builder with application/json body
func NewSetOpenWindowDetectionRequest(server string, homeId HomeId, zoneId ZoneId, body SetOpenWindowDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetOpenWindowDetectionRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetOpenWindowDetectionRequestWithBody generates requests for SetOpenWindowDetection with any type of body
func NewSetOpenWindowDetectionRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/openWindowDetection", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteZoneOverlayRequest generates requests for DeleteZoneOverlay
func NewDeleteZoneOverlayRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/overlay", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneOverlayRequest generates requests for GetZoneOverlay
func NewGetZoneOverlayRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/overlay", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetZoneOverlayRequest calls the generic SetZoneOverlay builder with application/json body
func NewSetZoneOverlayRequest(server string, homeId HomeId, zoneId ZoneId, body SetZoneOverlayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetZoneOverlayRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetZoneOverlayRequestWithBody generates requests for SetZoneOverlay with any type of body
func NewSetZoneOverlayRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/overlay", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveTimetableTypeRequest generates requests for GetActiveTimetableType
func NewGetActiveTimetableTypeRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/activeTimetable", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetActiveTimetableTypeRequest calls the generic SetActiveTimetableType builder with application/json body
func NewSetActiveTimetableTypeRequest(server string, homeId HomeId, zoneId ZoneId, body SetActiveTimetableTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetActiveTimetableTypeRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetActiveTimetableTypeRequestWithBody generates requests for SetActiveTimetableType with any type of body
func NewSetActiveTimetableTypeRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/activeTimetable", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAwayConfigurationRequest generates requests for GetAwayConfiguration
func NewGetAwayConfigurationRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/awayConfiguration", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetAwayConfigurationRequest calls the generic SetAwayConfiguration builder with application/json body
func NewSetAwayConfigurationRequest(server string, homeId HomeId, zoneId ZoneId, body SetAwayConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAwayConfigurationRequestWithBody(server, homeId, zoneId, "application/json", bodyReader)
}

// NewSetAwayConfigurationRequestWithBody generates requests for SetAwayConfiguration with any type of body
func NewSetAwayConfigurationRequestWithBody(server string, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/awayConfiguration", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneTimetablesRequest generates requests for GetZoneTimetables
func NewGetZoneTimetablesRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/timetables", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneTimetableRequest generates requests for GetZoneTimetable
func NewGetZoneTimetableRequest(server string, homeId HomeId, zoneId ZoneId, timetableTypeId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "timetableTypeId", runtime.ParamLocationPath, timetableTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/timetables/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZoneTimetableBlocksRequest generates requests for GetZoneTimetableBlocks
func NewGetZoneTimetableBlocksRequest(server string, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "timetableTypeId", runtime.ParamLocationPath, timetableTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/timetables/%s/blocks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimetableBlocksByDayTypeRequest generates requests for GetTimetableBlocksByDayType
func NewGetTimetableBlocksByDayTypeRequest(server string, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "timetableTypeId", runtime.ParamLocationPath, timetableTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dayType", runtime.ParamLocationPath, dayType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/timetables/%s/blocks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetTimetableBlocksForDayTypeRequest calls the generic SetTimetableBlocksForDayType builder with application/json body
func NewSetTimetableBlocksForDayTypeRequest(server string, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, body SetTimetableBlocksForDayTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTimetableBlocksForDayTypeRequestWithBody(server, homeId, zoneId, timetableTypeId, dayType, "application/json", bodyReader)
}

// NewSetTimetableBlocksForDayTypeRequestWithBody generates requests for SetTimetableBlocksForDayType with any type of body
func NewSetTimetableBlocksForDayTypeRequestWithBody(server string, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "timetableTypeId", runtime.ParamLocationPath, timetableTypeId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dayType", runtime.ParamLocationPath, dayType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/schedule/timetables/%s/blocks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetZoneStateRequest generates requests for GetZoneState
func NewGetZoneStateRequest(server string, homeId HomeId, zoneId ZoneId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "homeId", runtime.ParamLocationPath, homeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "zoneId", runtime.ParamLocationPath, zoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/homes/%s/zones/%s/state", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDeviceWithResponse request
	GetDeviceWithResponse(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*GetDeviceResponse, error)

	// IdentifyDeviceWithResponse request
	IdentifyDeviceWithResponse(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*IdentifyDeviceResponse, error)

	// GetTemperatureOffsetWithResponse request
	GetTemperatureOffsetWithResponse(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*GetTemperatureOffsetResponse, error)

	// SetTemperatureOffsetWithBodyWithResponse request with any body
	SetTemperatureOffsetWithBodyWithResponse(ctx context.Context, deviceId DeviceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTemperatureOffsetResponse, error)

	SetTemperatureOffsetWithResponse(ctx context.Context, deviceId DeviceId, body SetTemperatureOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTemperatureOffsetResponse, error)

	// GetHomeWithResponse request
	GetHomeWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHomeResponse, error)

	// GetAirComfortWithResponse request
	GetAirComfortWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetAirComfortResponse, error)

	// SetAwayRadiusInMetersWithBodyWithResponse request with any body
	SetAwayRadiusInMetersWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAwayRadiusInMetersResponse, error)

	SetAwayRadiusInMetersWithResponse(ctx context.Context, homeId HomeId, body SetAwayRadiusInMetersJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAwayRadiusInMetersResponse, error)

	// SetHomeDetailsWithBodyWithResponse request with any body
	SetHomeDetailsWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetHomeDetailsResponse, error)

	SetHomeDetailsWithResponse(ctx context.Context, homeId HomeId, body SetHomeDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetHomeDetailsResponse, error)

	// GetDeviceListWithResponse request
	GetDeviceListWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetDeviceListResponse, error)

	// GetDevicesWithResponse request
	GetDevicesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetDevicesResponse, error)

	// GetHeatingCircuitsWithResponse request
	GetHeatingCircuitsWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHeatingCircuitsResponse, error)

	// GetHeatingSystemWithResponse request
	GetHeatingSystemWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHeatingSystemResponse, error)

	// SetBoilerWithBodyWithResponse request with any body
	SetBoilerWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetBoilerResponse, error)

	SetBoilerWithResponse(ctx context.Context, homeId HomeId, body SetBoilerJSONRequestBody, reqEditors ...RequestEditorFn) (*SetBoilerResponse, error)

	// SetUnderfloorHeatingWithBodyWithResponse request with any body
	SetUnderfloorHeatingWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUnderfloorHeatingResponse, error)

	SetUnderfloorHeatingWithResponse(ctx context.Context, homeId HomeId, body SetUnderfloorHeatingJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUnderfloorHeatingResponse, error)

	// GetIncidentDetectionWithResponse request
	GetIncidentDetectionWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetIncidentDetectionResponse, error)

	// SetIncidentDetectionWithBodyWithResponse request with any body
	SetIncidentDetectionWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIncidentDetectionResponse, error)

	SetIncidentDetectionWithResponse(ctx context.Context, homeId HomeId, body SetIncidentDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIncidentDetectionResponse, error)

	// GetInstallationsWithResponse request
	GetInstallationsWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetInstallationsResponse, error)

	// GetMobileDevicesWithResponse request
	GetMobileDevicesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetMobileDevicesResponse, error)

	// DeleteMobileDeviceFromHomeWithResponse request
	DeleteMobileDeviceFromHomeWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId int64, params *DeleteMobileDeviceFromHomeParams, reqEditors ...RequestEditorFn) (*DeleteMobileDeviceFromHomeResponse, error)

	// GetMobileDeviceWithResponse request
	GetMobileDeviceWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*GetMobileDeviceResponse, error)

	// GetMobileDeviceSettingsWithResponse request
	GetMobileDeviceSettingsWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*GetMobileDeviceSettingsResponse, error)

	// SetMobileDeviceSettingsWithBodyWithResponse request with any body
	SetMobileDeviceSettingsWithBodyWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetMobileDeviceSettingsResponse, error)

	SetMobileDeviceSettingsWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId int64, body SetMobileDeviceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetMobileDeviceSettingsResponse, error)

	// DeleteZoneOverlaysWithResponse request
	DeleteZoneOverlaysWithResponse(ctx context.Context, homeId HomeId, params *DeleteZoneOverlaysParams, reqEditors ...RequestEditorFn) (*DeleteZoneOverlaysResponse, error)

	// SetZoneOverlaysWithBodyWithResponse request with any body
	SetZoneOverlaysWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetZoneOverlaysResponse, error)

	SetZoneOverlaysWithResponse(ctx context.Context, homeId HomeId, body SetZoneOverlaysJSONRequestBody, reqEditors ...RequestEditorFn) (*SetZoneOverlaysResponse, error)

	// DeletePresenceLockWithResponse request
	DeletePresenceLockWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*DeletePresenceLockResponse, error)

	// SetPresenceLockWithBodyWithResponse request with any body
	SetPresenceLockWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetPresenceLockResponse, error)

	SetPresenceLockWithResponse(ctx context.Context, homeId HomeId, body SetPresenceLockJSONRequestBody, reqEditors ...RequestEditorFn) (*SetPresenceLockResponse, error)

	// GetHomeStateWithResponse request
	GetHomeStateWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHomeStateResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetWeatherWithResponse request
	GetWeatherWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetWeatherResponse, error)

	// GetZoneStatesWithResponse request
	GetZoneStatesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetZoneStatesResponse, error)

	// GetZonesWithResponse request
	GetZonesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetZonesResponse, error)

	// CreateZoneWithBodyWithResponse request with any body
	CreateZoneWithBodyWithResponse(ctx context.Context, homeId HomeId, params *CreateZoneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error)

	CreateZoneWithResponse(ctx context.Context, homeId HomeId, params *CreateZoneParams, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error)

	// GetZoneCapabilitiesWithResponse request
	GetZoneCapabilitiesWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneCapabilitiesResponse, error)

	// GetZoneControlWithResponse request
	GetZoneControlWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneControlResponse, error)

	// SetHeatingCircuitWithBodyWithResponse request with any body
	SetHeatingCircuitWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetHeatingCircuitResponse, error)

	SetHeatingCircuitWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetHeatingCircuitJSONRequestBody, reqEditors ...RequestEditorFn) (*SetHeatingCircuitResponse, error)

	// GetZoneDayReportWithResponse request
	GetZoneDayReportWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, params *GetZoneDayReportParams, reqEditors ...RequestEditorFn) (*GetZoneDayReportResponse, error)

	// SetDazzleWithBodyWithResponse request with any body
	SetDazzleWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDazzleResponse, error)

	SetDazzleWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDazzleJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDazzleResponse, error)

	// GetDefaultZoneOverlayWithResponse request
	GetDefaultZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetDefaultZoneOverlayResponse, error)

	// SetDefaultZoneOverlayWithBodyWithResponse request with any body
	SetDefaultZoneOverlayWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDefaultZoneOverlayResponse, error)

	SetDefaultZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDefaultZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDefaultZoneOverlayResponse, error)

	// SetDetailsWithBodyWithResponse request with any body
	SetDetailsWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDetailsResponse, error)

	SetDetailsWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDetailsResponse, error)

	// MoveDeviceWithBodyWithResponse request with any body
	MoveDeviceWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveDeviceResponse, error)

	MoveDeviceWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, body MoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveDeviceResponse, error)

	// GetEarlyStartWithResponse request
	GetEarlyStartWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetEarlyStartResponse, error)

	// SetEarlyStartWithBodyWithResponse request with any body
	SetEarlyStartWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetEarlyStartResponse, error)

	SetEarlyStartWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetEarlyStartJSONRequestBody, reqEditors ...RequestEditorFn) (*SetEarlyStartResponse, error)

	// GetZoneMeasuringDeviceWithResponse request
	GetZoneMeasuringDeviceWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneMeasuringDeviceResponse, error)

	// SetZoneMeasuringDeviceWithBodyWithResponse request with any body
	SetZoneMeasuringDeviceWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetZoneMeasuringDeviceResponse, error)

	SetZoneMeasuringDeviceWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneMeasuringDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*SetZoneMeasuringDeviceResponse, error)

	// SetOpenWindowDetectionWithBodyWithResponse request with any body
	SetOpenWindowDetectionWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetOpenWindowDetectionResponse, error)

	SetOpenWindowDetectionWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetOpenWindowDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SetOpenWindowDetectionResponse, error)

	// DeleteZoneOverlayWithResponse request
	DeleteZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*DeleteZoneOverlayResponse, error)

	// GetZoneOverlayWithResponse request
	GetZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneOverlayResponse, error)

	// SetZoneOverlayWithBodyWithResponse request with any body
	SetZoneOverlayWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetZoneOverlayResponse, error)

	SetZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*SetZoneOverlayResponse, error)

	// GetActiveTimetableTypeWithResponse request
	GetActiveTimetableTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetActiveTimetableTypeResponse, error)

	// SetActiveTimetableTypeWithBodyWithResponse request with any body
	SetActiveTimetableTypeWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetActiveTimetableTypeResponse, error)

	SetActiveTimetableTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetActiveTimetableTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*SetActiveTimetableTypeResponse, error)

	// GetAwayConfigurationWithResponse request
	GetAwayConfigurationWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetAwayConfigurationResponse, error)

	// SetAwayConfigurationWithBodyWithResponse request with any body
	SetAwayConfigurationWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAwayConfigurationResponse, error)

	SetAwayConfigurationWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetAwayConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAwayConfigurationResponse, error)

	// GetZoneTimetablesWithResponse request
	GetZoneTimetablesWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneTimetablesResponse, error)

	// GetZoneTimetableWithResponse request
	GetZoneTimetableWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId int, reqEditors ...RequestEditorFn) (*GetZoneTimetableResponse, error)

	// GetZoneTimetableBlocksWithResponse request
	GetZoneTimetableBlocksWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, reqEditors ...RequestEditorFn) (*GetZoneTimetableBlocksResponse, error)

	// GetTimetableBlocksByDayTypeWithResponse request
	GetTimetableBlocksByDayTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, reqEditors ...RequestEditorFn) (*GetTimetableBlocksByDayTypeResponse, error)

	// SetTimetableBlocksForDayTypeWithBodyWithResponse request with any body
	SetTimetableBlocksForDayTypeWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTimetableBlocksForDayTypeResponse, error)

	SetTimetableBlocksForDayTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, body SetTimetableBlocksForDayTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTimetableBlocksForDayTypeResponse, error)

	// GetZoneStateWithResponse request
	GetZoneStateWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneStateResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)
}

type GetDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Device
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IdentifyDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r IdentifyDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentifyDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemperatureOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Temperature
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetTemperatureOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemperatureOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTemperatureOffsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Temperature
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetTemperatureOffsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTemperatureOffsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Home
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetHomeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAirComfortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AirComfort
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetAirComfortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAirComfortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAwayRadiusInMetersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetAwayRadiusInMetersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAwayRadiusInMetersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetHomeDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetHomeDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetHomeDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceList
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetDeviceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Device
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeatingCircuitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HeatingCircuit
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetHeatingCircuitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeatingCircuitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeatingSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HeatingSystem
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetHeatingSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeatingSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetBoilerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetBoilerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetBoilerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUnderfloorHeatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetUnderfloorHeatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUnderfloorHeatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentDetection
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetIncidentDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetIncidentDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetIncidentDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetIncidentDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstallationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetInstallationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstallationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMobileDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MobileDevice
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetMobileDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMobileDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMobileDeviceFromHomeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r DeleteMobileDeviceFromHomeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMobileDeviceFromHomeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMobileDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDevice
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetMobileDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMobileDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMobileDeviceSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceSettings
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetMobileDeviceSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMobileDeviceSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetMobileDeviceSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceSettings
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetMobileDeviceSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetMobileDeviceSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteZoneOverlaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r DeleteZoneOverlaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteZoneOverlaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetZoneOverlaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetZoneOverlaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetZoneOverlaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePresenceLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r DeletePresenceLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePresenceLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetPresenceLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetPresenceLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetPresenceLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeState
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetHomeStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWeatherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Weather
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetWeatherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWeatherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneStates
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Zone
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r CreateZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneCapabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneCapabilities
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneCapabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneCapabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneControl
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetHeatingCircuitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneControl
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetHeatingCircuitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetHeatingCircuitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneDayReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DayReport
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneDayReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneDayReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDazzleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetDazzleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDazzleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultZoneOverlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultZoneOverlay
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetDefaultZoneOverlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultZoneOverlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDefaultZoneOverlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultZoneOverlay
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetDefaultZoneOverlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDefaultZoneOverlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Zone
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r MoveDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEarlyStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EarlyStart
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r GetEarlyStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEarlyStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetEarlyStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EarlyStart
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetEarlyStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetEarlyStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneMeasuringDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Device
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneMeasuringDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneMeasuringDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetZoneMeasuringDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetZoneMeasuringDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetZoneMeasuringDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetOpenWindowDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetOpenWindowDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetOpenWindowDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteZoneOverlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r DeleteZoneOverlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteZoneOverlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneOverlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneOverlay
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneOverlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneOverlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetZoneOverlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneOverlay
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetZoneOverlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetZoneOverlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveTimetableTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimetableType
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r GetActiveTimetableTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveTimetableTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetActiveTimetableTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimetableType
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetActiveTimetableTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetActiveTimetableTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwayConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneAwayConfiguration
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetAwayConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwayConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAwayConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetAwayConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAwayConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneTimetablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimetableType
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
}

// Status returns HTTPResponse.Status
func (r GetZoneTimetablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneTimetablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneTimetableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimetableType
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneTimetableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneTimetableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneTimetableBlocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimetableBlock
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneTimetableBlocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneTimetableBlocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimetableBlocksByDayTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimetableBlock
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetTimetableBlocksByDayTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimetableBlocksByDayTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTimetableBlocksForDayTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimetableBlock
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
	JSON422      *InputError422
}

// Status returns HTTPResponse.Status
func (r SetTimetableBlocksForDayTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTimetableBlocksForDayTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoneStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ZoneState
	JSON401      *Unauthorized401
	JSON403      *AccessDenied403
	JSON404      *NotFound404
}

// Status returns HTTPResponse.Status
func (r GetZoneStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoneStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *Unauthorized401
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDeviceWithResponse request returning *GetDeviceResponse
func (c *ClientWithResponses) GetDeviceWithResponse(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*GetDeviceResponse, error) {
	rsp, err := c.GetDevice(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceResponse(rsp)
}

// IdentifyDeviceWithResponse request returning *IdentifyDeviceResponse
func (c *ClientWithResponses) IdentifyDeviceWithResponse(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*IdentifyDeviceResponse, error) {
	rsp, err := c.IdentifyDevice(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentifyDeviceResponse(rsp)
}

// GetTemperatureOffsetWithResponse request returning *GetTemperatureOffsetResponse
func (c *ClientWithResponses) GetTemperatureOffsetWithResponse(ctx context.Context, deviceId DeviceId, reqEditors ...RequestEditorFn) (*GetTemperatureOffsetResponse, error) {
	rsp, err := c.GetTemperatureOffset(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTemperatureOffsetResponse(rsp)
}

// SetTemperatureOffsetWithBodyWithResponse request with arbitrary body returning *SetTemperatureOffsetResponse
func (c *ClientWithResponses) SetTemperatureOffsetWithBodyWithResponse(ctx context.Context, deviceId DeviceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTemperatureOffsetResponse, error) {
	rsp, err := c.SetTemperatureOffsetWithBody(ctx, deviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTemperatureOffsetResponse(rsp)
}

func (c *ClientWithResponses) SetTemperatureOffsetWithResponse(ctx context.Context, deviceId DeviceId, body SetTemperatureOffsetJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTemperatureOffsetResponse, error) {
	rsp, err := c.SetTemperatureOffset(ctx, deviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTemperatureOffsetResponse(rsp)
}

// GetHomeWithResponse request returning *GetHomeResponse
func (c *ClientWithResponses) GetHomeWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHomeResponse, error) {
	rsp, err := c.GetHome(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeResponse(rsp)
}

// GetAirComfortWithResponse request returning *GetAirComfortResponse
func (c *ClientWithResponses) GetAirComfortWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetAirComfortResponse, error) {
	rsp, err := c.GetAirComfort(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAirComfortResponse(rsp)
}

// SetAwayRadiusInMetersWithBodyWithResponse request with arbitrary body returning *SetAwayRadiusInMetersResponse
func (c *ClientWithResponses) SetAwayRadiusInMetersWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAwayRadiusInMetersResponse, error) {
	rsp, err := c.SetAwayRadiusInMetersWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAwayRadiusInMetersResponse(rsp)
}

func (c *ClientWithResponses) SetAwayRadiusInMetersWithResponse(ctx context.Context, homeId HomeId, body SetAwayRadiusInMetersJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAwayRadiusInMetersResponse, error) {
	rsp, err := c.SetAwayRadiusInMeters(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAwayRadiusInMetersResponse(rsp)
}

// SetHomeDetailsWithBodyWithResponse request with arbitrary body returning *SetHomeDetailsResponse
func (c *ClientWithResponses) SetHomeDetailsWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetHomeDetailsResponse, error) {
	rsp, err := c.SetHomeDetailsWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetHomeDetailsResponse(rsp)
}

func (c *ClientWithResponses) SetHomeDetailsWithResponse(ctx context.Context, homeId HomeId, body SetHomeDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetHomeDetailsResponse, error) {
	rsp, err := c.SetHomeDetails(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetHomeDetailsResponse(rsp)
}

// GetDeviceListWithResponse request returning *GetDeviceListResponse
func (c *ClientWithResponses) GetDeviceListWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetDeviceListResponse, error) {
	rsp, err := c.GetDeviceList(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceListResponse(rsp)
}

// GetDevicesWithResponse request returning *GetDevicesResponse
func (c *ClientWithResponses) GetDevicesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetDevicesResponse, error) {
	rsp, err := c.GetDevices(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDevicesResponse(rsp)
}

// GetHeatingCircuitsWithResponse request returning *GetHeatingCircuitsResponse
func (c *ClientWithResponses) GetHeatingCircuitsWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHeatingCircuitsResponse, error) {
	rsp, err := c.GetHeatingCircuits(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeatingCircuitsResponse(rsp)
}

// GetHeatingSystemWithResponse request returning *GetHeatingSystemResponse
func (c *ClientWithResponses) GetHeatingSystemWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHeatingSystemResponse, error) {
	rsp, err := c.GetHeatingSystem(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeatingSystemResponse(rsp)
}

// SetBoilerWithBodyWithResponse request with arbitrary body returning *SetBoilerResponse
func (c *ClientWithResponses) SetBoilerWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetBoilerResponse, error) {
	rsp, err := c.SetBoilerWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetBoilerResponse(rsp)
}

func (c *ClientWithResponses) SetBoilerWithResponse(ctx context.Context, homeId HomeId, body SetBoilerJSONRequestBody, reqEditors ...RequestEditorFn) (*SetBoilerResponse, error) {
	rsp, err := c.SetBoiler(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetBoilerResponse(rsp)
}

// SetUnderfloorHeatingWithBodyWithResponse request with arbitrary body returning *SetUnderfloorHeatingResponse
func (c *ClientWithResponses) SetUnderfloorHeatingWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUnderfloorHeatingResponse, error) {
	rsp, err := c.SetUnderfloorHeatingWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUnderfloorHeatingResponse(rsp)
}

func (c *ClientWithResponses) SetUnderfloorHeatingWithResponse(ctx context.Context, homeId HomeId, body SetUnderfloorHeatingJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUnderfloorHeatingResponse, error) {
	rsp, err := c.SetUnderfloorHeating(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUnderfloorHeatingResponse(rsp)
}

// GetIncidentDetectionWithResponse request returning *GetIncidentDetectionResponse
func (c *ClientWithResponses) GetIncidentDetectionWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetIncidentDetectionResponse, error) {
	rsp, err := c.GetIncidentDetection(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentDetectionResponse(rsp)
}

// SetIncidentDetectionWithBodyWithResponse request with arbitrary body returning *SetIncidentDetectionResponse
func (c *ClientWithResponses) SetIncidentDetectionWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIncidentDetectionResponse, error) {
	rsp, err := c.SetIncidentDetectionWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIncidentDetectionResponse(rsp)
}

func (c *ClientWithResponses) SetIncidentDetectionWithResponse(ctx context.Context, homeId HomeId, body SetIncidentDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIncidentDetectionResponse, error) {
	rsp, err := c.SetIncidentDetection(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIncidentDetectionResponse(rsp)
}

// GetInstallationsWithResponse request returning *GetInstallationsResponse
func (c *ClientWithResponses) GetInstallationsWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetInstallationsResponse, error) {
	rsp, err := c.GetInstallations(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstallationsResponse(rsp)
}

// GetMobileDevicesWithResponse request returning *GetMobileDevicesResponse
func (c *ClientWithResponses) GetMobileDevicesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetMobileDevicesResponse, error) {
	rsp, err := c.GetMobileDevices(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMobileDevicesResponse(rsp)
}

// DeleteMobileDeviceFromHomeWithResponse request returning *DeleteMobileDeviceFromHomeResponse
func (c *ClientWithResponses) DeleteMobileDeviceFromHomeWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId int64, params *DeleteMobileDeviceFromHomeParams, reqEditors ...RequestEditorFn) (*DeleteMobileDeviceFromHomeResponse, error) {
	rsp, err := c.DeleteMobileDeviceFromHome(ctx, homeId, mobileDeviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMobileDeviceFromHomeResponse(rsp)
}

// GetMobileDeviceWithResponse request returning *GetMobileDeviceResponse
func (c *ClientWithResponses) GetMobileDeviceWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*GetMobileDeviceResponse, error) {
	rsp, err := c.GetMobileDevice(ctx, homeId, mobileDeviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMobileDeviceResponse(rsp)
}

// GetMobileDeviceSettingsWithResponse request returning *GetMobileDeviceSettingsResponse
func (c *ClientWithResponses) GetMobileDeviceSettingsWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId MobileDeviceId, reqEditors ...RequestEditorFn) (*GetMobileDeviceSettingsResponse, error) {
	rsp, err := c.GetMobileDeviceSettings(ctx, homeId, mobileDeviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMobileDeviceSettingsResponse(rsp)
}

// SetMobileDeviceSettingsWithBodyWithResponse request with arbitrary body returning *SetMobileDeviceSettingsResponse
func (c *ClientWithResponses) SetMobileDeviceSettingsWithBodyWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetMobileDeviceSettingsResponse, error) {
	rsp, err := c.SetMobileDeviceSettingsWithBody(ctx, homeId, mobileDeviceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetMobileDeviceSettingsResponse(rsp)
}

func (c *ClientWithResponses) SetMobileDeviceSettingsWithResponse(ctx context.Context, homeId HomeId, mobileDeviceId int64, body SetMobileDeviceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetMobileDeviceSettingsResponse, error) {
	rsp, err := c.SetMobileDeviceSettings(ctx, homeId, mobileDeviceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetMobileDeviceSettingsResponse(rsp)
}

// DeleteZoneOverlaysWithResponse request returning *DeleteZoneOverlaysResponse
func (c *ClientWithResponses) DeleteZoneOverlaysWithResponse(ctx context.Context, homeId HomeId, params *DeleteZoneOverlaysParams, reqEditors ...RequestEditorFn) (*DeleteZoneOverlaysResponse, error) {
	rsp, err := c.DeleteZoneOverlays(ctx, homeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZoneOverlaysResponse(rsp)
}

// SetZoneOverlaysWithBodyWithResponse request with arbitrary body returning *SetZoneOverlaysResponse
func (c *ClientWithResponses) SetZoneOverlaysWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetZoneOverlaysResponse, error) {
	rsp, err := c.SetZoneOverlaysWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetZoneOverlaysResponse(rsp)
}

func (c *ClientWithResponses) SetZoneOverlaysWithResponse(ctx context.Context, homeId HomeId, body SetZoneOverlaysJSONRequestBody, reqEditors ...RequestEditorFn) (*SetZoneOverlaysResponse, error) {
	rsp, err := c.SetZoneOverlays(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetZoneOverlaysResponse(rsp)
}

// DeletePresenceLockWithResponse request returning *DeletePresenceLockResponse
func (c *ClientWithResponses) DeletePresenceLockWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*DeletePresenceLockResponse, error) {
	rsp, err := c.DeletePresenceLock(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePresenceLockResponse(rsp)
}

// SetPresenceLockWithBodyWithResponse request with arbitrary body returning *SetPresenceLockResponse
func (c *ClientWithResponses) SetPresenceLockWithBodyWithResponse(ctx context.Context, homeId HomeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetPresenceLockResponse, error) {
	rsp, err := c.SetPresenceLockWithBody(ctx, homeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetPresenceLockResponse(rsp)
}

func (c *ClientWithResponses) SetPresenceLockWithResponse(ctx context.Context, homeId HomeId, body SetPresenceLockJSONRequestBody, reqEditors ...RequestEditorFn) (*SetPresenceLockResponse, error) {
	rsp, err := c.SetPresenceLock(ctx, homeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetPresenceLockResponse(rsp)
}

// GetHomeStateWithResponse request returning *GetHomeStateResponse
func (c *ClientWithResponses) GetHomeStateWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetHomeStateResponse, error) {
	rsp, err := c.GetHomeState(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeStateResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetWeatherWithResponse request returning *GetWeatherResponse
func (c *ClientWithResponses) GetWeatherWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetWeatherResponse, error) {
	rsp, err := c.GetWeather(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWeatherResponse(rsp)
}

// GetZoneStatesWithResponse request returning *GetZoneStatesResponse
func (c *ClientWithResponses) GetZoneStatesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetZoneStatesResponse, error) {
	rsp, err := c.GetZoneStates(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneStatesResponse(rsp)
}

// GetZonesWithResponse request returning *GetZonesResponse
func (c *ClientWithResponses) GetZonesWithResponse(ctx context.Context, homeId HomeId, reqEditors ...RequestEditorFn) (*GetZonesResponse, error) {
	rsp, err := c.GetZones(ctx, homeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZonesResponse(rsp)
}

// CreateZoneWithBodyWithResponse request with arbitrary body returning *CreateZoneResponse
func (c *ClientWithResponses) CreateZoneWithBodyWithResponse(ctx context.Context, homeId HomeId, params *CreateZoneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error) {
	rsp, err := c.CreateZoneWithBody(ctx, homeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateZoneResponse(rsp)
}

func (c *ClientWithResponses) CreateZoneWithResponse(ctx context.Context, homeId HomeId, params *CreateZoneParams, body CreateZoneJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateZoneResponse, error) {
	rsp, err := c.CreateZone(ctx, homeId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateZoneResponse(rsp)
}

// GetZoneCapabilitiesWithResponse request returning *GetZoneCapabilitiesResponse
func (c *ClientWithResponses) GetZoneCapabilitiesWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneCapabilitiesResponse, error) {
	rsp, err := c.GetZoneCapabilities(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneCapabilitiesResponse(rsp)
}

// GetZoneControlWithResponse request returning *GetZoneControlResponse
func (c *ClientWithResponses) GetZoneControlWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneControlResponse, error) {
	rsp, err := c.GetZoneControl(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneControlResponse(rsp)
}

// SetHeatingCircuitWithBodyWithResponse request with arbitrary body returning *SetHeatingCircuitResponse
func (c *ClientWithResponses) SetHeatingCircuitWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetHeatingCircuitResponse, error) {
	rsp, err := c.SetHeatingCircuitWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetHeatingCircuitResponse(rsp)
}

func (c *ClientWithResponses) SetHeatingCircuitWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetHeatingCircuitJSONRequestBody, reqEditors ...RequestEditorFn) (*SetHeatingCircuitResponse, error) {
	rsp, err := c.SetHeatingCircuit(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetHeatingCircuitResponse(rsp)
}

// GetZoneDayReportWithResponse request returning *GetZoneDayReportResponse
func (c *ClientWithResponses) GetZoneDayReportWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, params *GetZoneDayReportParams, reqEditors ...RequestEditorFn) (*GetZoneDayReportResponse, error) {
	rsp, err := c.GetZoneDayReport(ctx, homeId, zoneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneDayReportResponse(rsp)
}

// SetDazzleWithBodyWithResponse request with arbitrary body returning *SetDazzleResponse
func (c *ClientWithResponses) SetDazzleWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDazzleResponse, error) {
	rsp, err := c.SetDazzleWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDazzleResponse(rsp)
}

func (c *ClientWithResponses) SetDazzleWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDazzleJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDazzleResponse, error) {
	rsp, err := c.SetDazzle(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDazzleResponse(rsp)
}

// GetDefaultZoneOverlayWithResponse request returning *GetDefaultZoneOverlayResponse
func (c *ClientWithResponses) GetDefaultZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetDefaultZoneOverlayResponse, error) {
	rsp, err := c.GetDefaultZoneOverlay(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultZoneOverlayResponse(rsp)
}

// SetDefaultZoneOverlayWithBodyWithResponse request with arbitrary body returning *SetDefaultZoneOverlayResponse
func (c *ClientWithResponses) SetDefaultZoneOverlayWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDefaultZoneOverlayResponse, error) {
	rsp, err := c.SetDefaultZoneOverlayWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefaultZoneOverlayResponse(rsp)
}

func (c *ClientWithResponses) SetDefaultZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDefaultZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDefaultZoneOverlayResponse, error) {
	rsp, err := c.SetDefaultZoneOverlay(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefaultZoneOverlayResponse(rsp)
}

// SetDetailsWithBodyWithResponse request with arbitrary body returning *SetDetailsResponse
func (c *ClientWithResponses) SetDetailsWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetDetailsResponse, error) {
	rsp, err := c.SetDetailsWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDetailsResponse(rsp)
}

func (c *ClientWithResponses) SetDetailsWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetDetailsResponse, error) {
	rsp, err := c.SetDetails(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDetailsResponse(rsp)
}

// MoveDeviceWithBodyWithResponse request with arbitrary body returning *MoveDeviceResponse
func (c *ClientWithResponses) MoveDeviceWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveDeviceResponse, error) {
	rsp, err := c.MoveDeviceWithBody(ctx, homeId, zoneId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveDeviceResponse(rsp)
}

func (c *ClientWithResponses) MoveDeviceWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, params *MoveDeviceParams, body MoveDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveDeviceResponse, error) {
	rsp, err := c.MoveDevice(ctx, homeId, zoneId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveDeviceResponse(rsp)
}

// GetEarlyStartWithResponse request returning *GetEarlyStartResponse
func (c *ClientWithResponses) GetEarlyStartWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetEarlyStartResponse, error) {
	rsp, err := c.GetEarlyStart(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEarlyStartResponse(rsp)
}

// SetEarlyStartWithBodyWithResponse request with arbitrary body returning *SetEarlyStartResponse
func (c *ClientWithResponses) SetEarlyStartWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetEarlyStartResponse, error) {
	rsp, err := c.SetEarlyStartWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetEarlyStartResponse(rsp)
}

func (c *ClientWithResponses) SetEarlyStartWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetEarlyStartJSONRequestBody, reqEditors ...RequestEditorFn) (*SetEarlyStartResponse, error) {
	rsp, err := c.SetEarlyStart(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetEarlyStartResponse(rsp)
}

// GetZoneMeasuringDeviceWithResponse request returning *GetZoneMeasuringDeviceResponse
func (c *ClientWithResponses) GetZoneMeasuringDeviceWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneMeasuringDeviceResponse, error) {
	rsp, err := c.GetZoneMeasuringDevice(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneMeasuringDeviceResponse(rsp)
}

// SetZoneMeasuringDeviceWithBodyWithResponse request with arbitrary body returning *SetZoneMeasuringDeviceResponse
func (c *ClientWithResponses) SetZoneMeasuringDeviceWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetZoneMeasuringDeviceResponse, error) {
	rsp, err := c.SetZoneMeasuringDeviceWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetZoneMeasuringDeviceResponse(rsp)
}

func (c *ClientWithResponses) SetZoneMeasuringDeviceWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneMeasuringDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*SetZoneMeasuringDeviceResponse, error) {
	rsp, err := c.SetZoneMeasuringDevice(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetZoneMeasuringDeviceResponse(rsp)
}

// SetOpenWindowDetectionWithBodyWithResponse request with arbitrary body returning *SetOpenWindowDetectionResponse
func (c *ClientWithResponses) SetOpenWindowDetectionWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetOpenWindowDetectionResponse, error) {
	rsp, err := c.SetOpenWindowDetectionWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetOpenWindowDetectionResponse(rsp)
}

func (c *ClientWithResponses) SetOpenWindowDetectionWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetOpenWindowDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SetOpenWindowDetectionResponse, error) {
	rsp, err := c.SetOpenWindowDetection(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetOpenWindowDetectionResponse(rsp)
}

// DeleteZoneOverlayWithResponse request returning *DeleteZoneOverlayResponse
func (c *ClientWithResponses) DeleteZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*DeleteZoneOverlayResponse, error) {
	rsp, err := c.DeleteZoneOverlay(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteZoneOverlayResponse(rsp)
}

// GetZoneOverlayWithResponse request returning *GetZoneOverlayResponse
func (c *ClientWithResponses) GetZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneOverlayResponse, error) {
	rsp, err := c.GetZoneOverlay(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneOverlayResponse(rsp)
}

// SetZoneOverlayWithBodyWithResponse request with arbitrary body returning *SetZoneOverlayResponse
func (c *ClientWithResponses) SetZoneOverlayWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetZoneOverlayResponse, error) {
	rsp, err := c.SetZoneOverlayWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetZoneOverlayResponse(rsp)
}

func (c *ClientWithResponses) SetZoneOverlayWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetZoneOverlayJSONRequestBody, reqEditors ...RequestEditorFn) (*SetZoneOverlayResponse, error) {
	rsp, err := c.SetZoneOverlay(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetZoneOverlayResponse(rsp)
}

// GetActiveTimetableTypeWithResponse request returning *GetActiveTimetableTypeResponse
func (c *ClientWithResponses) GetActiveTimetableTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetActiveTimetableTypeResponse, error) {
	rsp, err := c.GetActiveTimetableType(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveTimetableTypeResponse(rsp)
}

// SetActiveTimetableTypeWithBodyWithResponse request with arbitrary body returning *SetActiveTimetableTypeResponse
func (c *ClientWithResponses) SetActiveTimetableTypeWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetActiveTimetableTypeResponse, error) {
	rsp, err := c.SetActiveTimetableTypeWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetActiveTimetableTypeResponse(rsp)
}

func (c *ClientWithResponses) SetActiveTimetableTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetActiveTimetableTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*SetActiveTimetableTypeResponse, error) {
	rsp, err := c.SetActiveTimetableType(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetActiveTimetableTypeResponse(rsp)
}

// GetAwayConfigurationWithResponse request returning *GetAwayConfigurationResponse
func (c *ClientWithResponses) GetAwayConfigurationWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetAwayConfigurationResponse, error) {
	rsp, err := c.GetAwayConfiguration(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwayConfigurationResponse(rsp)
}

// SetAwayConfigurationWithBodyWithResponse request with arbitrary body returning *SetAwayConfigurationResponse
func (c *ClientWithResponses) SetAwayConfigurationWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAwayConfigurationResponse, error) {
	rsp, err := c.SetAwayConfigurationWithBody(ctx, homeId, zoneId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAwayConfigurationResponse(rsp)
}

func (c *ClientWithResponses) SetAwayConfigurationWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, body SetAwayConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAwayConfigurationResponse, error) {
	rsp, err := c.SetAwayConfiguration(ctx, homeId, zoneId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAwayConfigurationResponse(rsp)
}

// GetZoneTimetablesWithResponse request returning *GetZoneTimetablesResponse
func (c *ClientWithResponses) GetZoneTimetablesWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneTimetablesResponse, error) {
	rsp, err := c.GetZoneTimetables(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTimetablesResponse(rsp)
}

// GetZoneTimetableWithResponse request returning *GetZoneTimetableResponse
func (c *ClientWithResponses) GetZoneTimetableWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId int, reqEditors ...RequestEditorFn) (*GetZoneTimetableResponse, error) {
	rsp, err := c.GetZoneTimetable(ctx, homeId, zoneId, timetableTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTimetableResponse(rsp)
}

// GetZoneTimetableBlocksWithResponse request returning *GetZoneTimetableBlocksResponse
func (c *ClientWithResponses) GetZoneTimetableBlocksWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, reqEditors ...RequestEditorFn) (*GetZoneTimetableBlocksResponse, error) {
	rsp, err := c.GetZoneTimetableBlocks(ctx, homeId, zoneId, timetableTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneTimetableBlocksResponse(rsp)
}

// GetTimetableBlocksByDayTypeWithResponse request returning *GetTimetableBlocksByDayTypeResponse
func (c *ClientWithResponses) GetTimetableBlocksByDayTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, reqEditors ...RequestEditorFn) (*GetTimetableBlocksByDayTypeResponse, error) {
	rsp, err := c.GetTimetableBlocksByDayType(ctx, homeId, zoneId, timetableTypeId, dayType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimetableBlocksByDayTypeResponse(rsp)
}

// SetTimetableBlocksForDayTypeWithBodyWithResponse request with arbitrary body returning *SetTimetableBlocksForDayTypeResponse
func (c *ClientWithResponses) SetTimetableBlocksForDayTypeWithBodyWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTimetableBlocksForDayTypeResponse, error) {
	rsp, err := c.SetTimetableBlocksForDayTypeWithBody(ctx, homeId, zoneId, timetableTypeId, dayType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTimetableBlocksForDayTypeResponse(rsp)
}

func (c *ClientWithResponses) SetTimetableBlocksForDayTypeWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, timetableTypeId TimetableTypeId, dayType DayType, body SetTimetableBlocksForDayTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTimetableBlocksForDayTypeResponse, error) {
	rsp, err := c.SetTimetableBlocksForDayType(ctx, homeId, zoneId, timetableTypeId, dayType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTimetableBlocksForDayTypeResponse(rsp)
}

// GetZoneStateWithResponse request returning *GetZoneStateResponse
func (c *ClientWithResponses) GetZoneStateWithResponse(ctx context.Context, homeId HomeId, zoneId ZoneId, reqEditors ...RequestEditorFn) (*GetZoneStateResponse, error) {
	rsp, err := c.GetZoneState(ctx, homeId, zoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoneStateResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// ParseGetDeviceResponse parses an HTTP response from a GetDeviceWithResponse call
func ParseGetDeviceResponse(rsp *http.Response) (*GetDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseIdentifyDeviceResponse parses an HTTP response from a IdentifyDeviceWithResponse call
func ParseIdentifyDeviceResponse(rsp *http.Response) (*IdentifyDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentifyDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetTemperatureOffsetResponse parses an HTTP response from a GetTemperatureOffsetWithResponse call
func ParseGetTemperatureOffsetResponse(rsp *http.Response) (*GetTemperatureOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTemperatureOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Temperature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetTemperatureOffsetResponse parses an HTTP response from a SetTemperatureOffsetWithResponse call
func ParseSetTemperatureOffsetResponse(rsp *http.Response) (*SetTemperatureOffsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTemperatureOffsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Temperature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetHomeResponse parses an HTTP response from a GetHomeWithResponse call
func ParseGetHomeResponse(rsp *http.Response) (*GetHomeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Home
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetAirComfortResponse parses an HTTP response from a GetAirComfortWithResponse call
func ParseGetAirComfortResponse(rsp *http.Response) (*GetAirComfortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAirComfortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AirComfort
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetAwayRadiusInMetersResponse parses an HTTP response from a SetAwayRadiusInMetersWithResponse call
func ParseSetAwayRadiusInMetersResponse(rsp *http.Response) (*SetAwayRadiusInMetersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAwayRadiusInMetersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetHomeDetailsResponse parses an HTTP response from a SetHomeDetailsWithResponse call
func ParseSetHomeDetailsResponse(rsp *http.Response) (*SetHomeDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetHomeDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDeviceListResponse parses an HTTP response from a GetDeviceListWithResponse call
func ParseGetDeviceListResponse(rsp *http.Response) (*GetDeviceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDevicesResponse parses an HTTP response from a GetDevicesWithResponse call
func ParseGetDevicesResponse(rsp *http.Response) (*GetDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetHeatingCircuitsResponse parses an HTTP response from a GetHeatingCircuitsWithResponse call
func ParseGetHeatingCircuitsResponse(rsp *http.Response) (*GetHeatingCircuitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeatingCircuitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HeatingCircuit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetHeatingSystemResponse parses an HTTP response from a GetHeatingSystemWithResponse call
func ParseGetHeatingSystemResponse(rsp *http.Response) (*GetHeatingSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeatingSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HeatingSystem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetBoilerResponse parses an HTTP response from a SetBoilerWithResponse call
func ParseSetBoilerResponse(rsp *http.Response) (*SetBoilerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetBoilerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetUnderfloorHeatingResponse parses an HTTP response from a SetUnderfloorHeatingWithResponse call
func ParseSetUnderfloorHeatingResponse(rsp *http.Response) (*SetUnderfloorHeatingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUnderfloorHeatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetIncidentDetectionResponse parses an HTTP response from a GetIncidentDetectionWithResponse call
func ParseGetIncidentDetectionResponse(rsp *http.Response) (*GetIncidentDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetIncidentDetectionResponse parses an HTTP response from a SetIncidentDetectionWithResponse call
func ParseSetIncidentDetectionResponse(rsp *http.Response) (*SetIncidentDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetIncidentDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetInstallationsResponse parses an HTTP response from a GetInstallationsWithResponse call
func ParseGetInstallationsResponse(rsp *http.Response) (*GetInstallationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstallationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetMobileDevicesResponse parses an HTTP response from a GetMobileDevicesWithResponse call
func ParseGetMobileDevicesResponse(rsp *http.Response) (*GetMobileDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMobileDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MobileDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteMobileDeviceFromHomeResponse parses an HTTP response from a DeleteMobileDeviceFromHomeWithResponse call
func ParseDeleteMobileDeviceFromHomeResponse(rsp *http.Response) (*DeleteMobileDeviceFromHomeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMobileDeviceFromHomeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMobileDeviceResponse parses an HTTP response from a GetMobileDeviceWithResponse call
func ParseGetMobileDeviceResponse(rsp *http.Response) (*GetMobileDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMobileDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetMobileDeviceSettingsResponse parses an HTTP response from a GetMobileDeviceSettingsWithResponse call
func ParseGetMobileDeviceSettingsResponse(rsp *http.Response) (*GetMobileDeviceSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMobileDeviceSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetMobileDeviceSettingsResponse parses an HTTP response from a SetMobileDeviceSettingsWithResponse call
func ParseSetMobileDeviceSettingsResponse(rsp *http.Response) (*SetMobileDeviceSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetMobileDeviceSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteZoneOverlaysResponse parses an HTTP response from a DeleteZoneOverlaysWithResponse call
func ParseDeleteZoneOverlaysResponse(rsp *http.Response) (*DeleteZoneOverlaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteZoneOverlaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetZoneOverlaysResponse parses an HTTP response from a SetZoneOverlaysWithResponse call
func ParseSetZoneOverlaysResponse(rsp *http.Response) (*SetZoneOverlaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetZoneOverlaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeletePresenceLockResponse parses an HTTP response from a DeletePresenceLockWithResponse call
func ParseDeletePresenceLockResponse(rsp *http.Response) (*DeletePresenceLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePresenceLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetPresenceLockResponse parses an HTTP response from a SetPresenceLockWithResponse call
func ParseSetPresenceLockResponse(rsp *http.Response) (*SetPresenceLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetPresenceLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetHomeStateResponse parses an HTTP response from a GetHomeStateWithResponse call
func ParseGetHomeStateResponse(rsp *http.Response) (*GetHomeStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetWeatherResponse parses an HTTP response from a GetWeatherWithResponse call
func ParseGetWeatherResponse(rsp *http.Response) (*GetWeatherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWeatherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Weather
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetZoneStatesResponse parses an HTTP response from a GetZoneStatesWithResponse call
func ParseGetZoneStatesResponse(rsp *http.Response) (*GetZoneStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneStates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetZonesResponse parses an HTTP response from a GetZonesWithResponse call
func ParseGetZonesResponse(rsp *http.Response) (*GetZonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateZoneResponse parses an HTTP response from a CreateZoneWithResponse call
func ParseCreateZoneResponse(rsp *http.Response) (*CreateZoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetZoneCapabilitiesResponse parses an HTTP response from a GetZoneCapabilitiesWithResponse call
func ParseGetZoneCapabilitiesResponse(rsp *http.Response) (*GetZoneCapabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneCapabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneCapabilities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetZoneControlResponse parses an HTTP response from a GetZoneControlWithResponse call
func ParseGetZoneControlResponse(rsp *http.Response) (*GetZoneControlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneControl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetHeatingCircuitResponse parses an HTTP response from a SetHeatingCircuitWithResponse call
func ParseSetHeatingCircuitResponse(rsp *http.Response) (*SetHeatingCircuitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetHeatingCircuitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneControl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetZoneDayReportResponse parses an HTTP response from a GetZoneDayReportWithResponse call
func ParseGetZoneDayReportResponse(rsp *http.Response) (*GetZoneDayReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneDayReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DayReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetDazzleResponse parses an HTTP response from a SetDazzleWithResponse call
func ParseSetDazzleResponse(rsp *http.Response) (*SetDazzleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDazzleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDefaultZoneOverlayResponse parses an HTTP response from a GetDefaultZoneOverlayWithResponse call
func ParseGetDefaultZoneOverlayResponse(rsp *http.Response) (*GetDefaultZoneOverlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultZoneOverlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultZoneOverlay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetDefaultZoneOverlayResponse parses an HTTP response from a SetDefaultZoneOverlayWithResponse call
func ParseSetDefaultZoneOverlayResponse(rsp *http.Response) (*SetDefaultZoneOverlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDefaultZoneOverlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultZoneOverlay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetDetailsResponse parses an HTTP response from a SetDetailsWithResponse call
func ParseSetDetailsResponse(rsp *http.Response) (*SetDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Zone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseMoveDeviceResponse parses an HTTP response from a MoveDeviceWithResponse call
func ParseMoveDeviceResponse(rsp *http.Response) (*MoveDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetEarlyStartResponse parses an HTTP response from a GetEarlyStartWithResponse call
func ParseGetEarlyStartResponse(rsp *http.Response) (*GetEarlyStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEarlyStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EarlyStart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetEarlyStartResponse parses an HTTP response from a SetEarlyStartWithResponse call
func ParseSetEarlyStartResponse(rsp *http.Response) (*SetEarlyStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetEarlyStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EarlyStart
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetZoneMeasuringDeviceResponse parses an HTTP response from a GetZoneMeasuringDeviceWithResponse call
func ParseGetZoneMeasuringDeviceResponse(rsp *http.Response) (*GetZoneMeasuringDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneMeasuringDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetZoneMeasuringDeviceResponse parses an HTTP response from a SetZoneMeasuringDeviceWithResponse call
func ParseSetZoneMeasuringDeviceResponse(rsp *http.Response) (*SetZoneMeasuringDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetZoneMeasuringDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetOpenWindowDetectionResponse parses an HTTP response from a SetOpenWindowDetectionWithResponse call
func ParseSetOpenWindowDetectionResponse(rsp *http.Response) (*SetOpenWindowDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetOpenWindowDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteZoneOverlayResponse parses an HTTP response from a DeleteZoneOverlayWithResponse call
func ParseDeleteZoneOverlayResponse(rsp *http.Response) (*DeleteZoneOverlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteZoneOverlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetZoneOverlayResponse parses an HTTP response from a GetZoneOverlayWithResponse call
func ParseGetZoneOverlayResponse(rsp *http.Response) (*GetZoneOverlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneOverlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneOverlay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetZoneOverlayResponse parses an HTTP response from a SetZoneOverlayWithResponse call
func ParseSetZoneOverlayResponse(rsp *http.Response) (*SetZoneOverlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetZoneOverlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneOverlay
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetActiveTimetableTypeResponse parses an HTTP response from a GetActiveTimetableTypeWithResponse call
func ParseGetActiveTimetableTypeResponse(rsp *http.Response) (*GetActiveTimetableTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveTimetableTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimetableType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetActiveTimetableTypeResponse parses an HTTP response from a SetActiveTimetableTypeWithResponse call
func ParseSetActiveTimetableTypeResponse(rsp *http.Response) (*SetActiveTimetableTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetActiveTimetableTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimetableType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAwayConfigurationResponse parses an HTTP response from a GetAwayConfigurationWithResponse call
func ParseGetAwayConfigurationResponse(rsp *http.Response) (*GetAwayConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwayConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneAwayConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSetAwayConfigurationResponse parses an HTTP response from a SetAwayConfigurationWithResponse call
func ParseSetAwayConfigurationResponse(rsp *http.Response) (*SetAwayConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAwayConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetZoneTimetablesResponse parses an HTTP response from a GetZoneTimetablesWithResponse call
func ParseGetZoneTimetablesResponse(rsp *http.Response) (*GetZoneTimetablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneTimetablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimetableType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetZoneTimetableResponse parses an HTTP response from a GetZoneTimetableWithResponse call
func ParseGetZoneTimetableResponse(rsp *http.Response) (*GetZoneTimetableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneTimetableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimetableType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetZoneTimetableBlocksResponse parses an HTTP response from a GetZoneTimetableBlocksWithResponse call
func ParseGetZoneTimetableBlocksResponse(rsp *http.Response) (*GetZoneTimetableBlocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneTimetableBlocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimetableBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTimetableBlocksByDayTypeResponse parses an HTTP response from a GetTimetableBlocksByDayTypeWithResponse call
func ParseGetTimetableBlocksByDayTypeResponse(rsp *http.Response) (*GetTimetableBlocksByDayTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimetableBlocksByDayTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimetableBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetTimetableBlocksForDayTypeResponse parses an HTTP response from a SetTimetableBlocksForDayTypeWithResponse call
func ParseSetTimetableBlocksForDayTypeResponse(rsp *http.Response) (*SetTimetableBlocksForDayTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTimetableBlocksForDayTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimetableBlock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InputError422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetZoneStateResponse parses an HTTP response from a GetZoneStateWithResponse call
func ParseGetZoneStateResponse(rsp *http.Response) (*GetZoneStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoneStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ZoneState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest AccessDenied403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
