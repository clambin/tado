// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tado "github.com/clambin/tado"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// DeleteZoneOverlay provides a mock function with given fields: _a0, _a1
func (_m *API) DeleteZoneOverlay(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: _a0
func (_m *API) GetAccount(_a0 context.Context) (tado.Account, error) {
	ret := _m.Called(_a0)

	var r0 tado.Account
	if rf, ok := ret.Get(0).(func(context.Context) tado.Account); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveHome provides a mock function with given fields: _a0
func (_m *API) GetActiveHome(_a0 context.Context) (tado.Home, bool) {
	ret := _m.Called(_a0)

	var r0 tado.Home
	if rf, ok := ret.Get(0).(func(context.Context) tado.Home); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.Home)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetActiveTimeTable provides a mock function with given fields: _a0, _a1
func (_m *API) GetActiveTimeTable(_a0 context.Context, _a1 int) (tado.Timetable, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tado.Timetable
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.Timetable); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.Timetable)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAirComfort provides a mock function with given fields: _a0
func (_m *API) GetAirComfort(_a0 context.Context) (tado.AirComfort, error) {
	ret := _m.Called(_a0)

	var r0 tado.AirComfort
	if rf, ok := ret.Get(0).(func(context.Context) tado.AirComfort); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.AirComfort)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsumption provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) GetConsumption(_a0 context.Context, _a1 string, _a2 time.Time, _a3 time.Time) (tado.Consumption, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 tado.Consumption
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) tado.Consumption); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(tado.Consumption)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnergySavings provides a mock function with given fields: _a0
func (_m *API) GetEnergySavings(_a0 context.Context) ([]tado.EnergySavingsReport, error) {
	ret := _m.Called(_a0)

	var r0 []tado.EnergySavingsReport
	if rf, ok := ret.Get(0).(func(context.Context) []tado.EnergySavingsReport); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.EnergySavingsReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeatingCircuits provides a mock function with given fields: _a0
func (_m *API) GetHeatingCircuits(_a0 context.Context) ([]tado.HeatingCircuit, error) {
	ret := _m.Called(_a0)

	var r0 []tado.HeatingCircuit
	if rf, ok := ret.Get(0).(func(context.Context) []tado.HeatingCircuit); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.HeatingCircuit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHomeInfo provides a mock function with given fields: _a0
func (_m *API) GetHomeInfo(_a0 context.Context) (tado.HomeInfo, error) {
	ret := _m.Called(_a0)

	var r0 tado.HomeInfo
	if rf, ok := ret.Get(0).(func(context.Context) tado.HomeInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.HomeInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHomes provides a mock function with given fields: _a0
func (_m *API) GetHomes(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMobileDevices provides a mock function with given fields: _a0
func (_m *API) GetMobileDevices(_a0 context.Context) ([]tado.MobileDevice, error) {
	ret := _m.Called(_a0)

	var r0 []tado.MobileDevice
	if rf, ok := ret.Get(0).(func(context.Context) []tado.MobileDevice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.MobileDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRunningTimes provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetRunningTimes(_a0 context.Context, _a1 time.Time, _a2 time.Time) ([]tado.RunningTime, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []tado.RunningTime
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []tado.RunningTime); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.RunningTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeTableBlocks provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) GetTimeTableBlocks(_a0 context.Context, _a1 int, _a2 tado.TimetableID) ([]tado.Block, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []tado.Block
	if rf, ok := ret.Get(0).(func(context.Context, int, tado.TimetableID) []tado.Block); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, tado.TimetableID) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeTableBlocksForDayType provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) GetTimeTableBlocksForDayType(_a0 context.Context, _a1 int, _a2 tado.TimetableID, _a3 string) ([]tado.Block, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []tado.Block
	if rf, ok := ret.Get(0).(func(context.Context, int, tado.TimetableID, string) []tado.Block); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, tado.TimetableID, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeTables provides a mock function with given fields: _a0, _a1
func (_m *API) GetTimeTables(_a0 context.Context, _a1 int) ([]tado.Timetable, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []tado.Timetable
	if rf, ok := ret.Get(0).(func(context.Context, int) []tado.Timetable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.Timetable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: _a0
func (_m *API) GetUsers(_a0 context.Context) ([]tado.User, error) {
	ret := _m.Called(_a0)

	var r0 []tado.User
	if rf, ok := ret.Get(0).(func(context.Context) []tado.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherInfo provides a mock function with given fields: _a0
func (_m *API) GetWeatherInfo(_a0 context.Context) (tado.WeatherInfo, error) {
	ret := _m.Called(_a0)

	var r0 tado.WeatherInfo
	if rf, ok := ret.Get(0).(func(context.Context) tado.WeatherInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.WeatherInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneAutoConfiguration provides a mock function with given fields: _a0, _a1
func (_m *API) GetZoneAutoConfiguration(_a0 context.Context, _a1 int) (tado.ZoneAwayConfiguration, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tado.ZoneAwayConfiguration
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.ZoneAwayConfiguration); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.ZoneAwayConfiguration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneCapabilities provides a mock function with given fields: _a0, _a1
func (_m *API) GetZoneCapabilities(_a0 context.Context, _a1 int) (tado.ZoneCapabilities, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tado.ZoneCapabilities
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.ZoneCapabilities); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.ZoneCapabilities)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneEarlyStart provides a mock function with given fields: _a0, _a1
func (_m *API) GetZoneEarlyStart(_a0 context.Context, _a1 int) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneInfo provides a mock function with given fields: _a0, _a1
func (_m *API) GetZoneInfo(_a0 context.Context, _a1 int) (tado.ZoneInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tado.ZoneInfo
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.ZoneInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.ZoneInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZones provides a mock function with given fields: _a0
func (_m *API) GetZones(_a0 context.Context) ([]tado.Zone, error) {
	ret := _m.Called(_a0)

	var r0 []tado.Zone
	if rf, ok := ret.Get(0).(func(context.Context) []tado.Zone); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.Zone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActiveHome provides a mock function with given fields: _a0, _a1
func (_m *API) SetActiveHome(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetActiveTimeTable provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) SetActiveTimeTable(_a0 context.Context, _a1 int, _a2 tado.Timetable) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, tado.Timetable) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTimeTableBlocksForDayType provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *API) SetTimeTableBlocksForDayType(_a0 context.Context, _a1 int, _a2 tado.TimetableID, _a3 string, _a4 []tado.Block) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, tado.TimetableID, string, []tado.Block) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetZoneAutoConfiguration provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) SetZoneAutoConfiguration(_a0 context.Context, _a1 int, _a2 tado.ZoneAwayConfiguration) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, tado.ZoneAwayConfiguration) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetZoneEarlyStart provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) SetZoneEarlyStart(_a0 context.Context, _a1 int, _a2 bool) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetZoneOverlay provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) SetZoneOverlay(_a0 context.Context, _a1 int, _a2 float64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetZoneTemporaryOverlay provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) SetZoneTemporaryOverlay(_a0 context.Context, _a1 int, _a2 float64, _a3 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPI(t mockConstructorTestingTNewAPI) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
