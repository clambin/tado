// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	tado "github.com/clambin/tado"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// DeleteZoneOverlay provides a mock function with given fields: _a0, _a1
func (_m *API) DeleteZoneOverlay(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMobileDevices provides a mock function with given fields: _a0
func (_m *API) GetMobileDevices(_a0 context.Context) ([]tado.MobileDevice, error) {
	ret := _m.Called(_a0)

	var r0 []tado.MobileDevice
	if rf, ok := ret.Get(0).(func(context.Context) []tado.MobileDevice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.MobileDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherInfo provides a mock function with given fields: _a0
func (_m *API) GetWeatherInfo(_a0 context.Context) (tado.WeatherInfo, error) {
	ret := _m.Called(_a0)

	var r0 tado.WeatherInfo
	if rf, ok := ret.Get(0).(func(context.Context) tado.WeatherInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.WeatherInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneInfo provides a mock function with given fields: _a0, _a1
func (_m *API) GetZoneInfo(_a0 context.Context, _a1 int) (tado.ZoneInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tado.ZoneInfo
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.ZoneInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.ZoneInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZones provides a mock function with given fields: _a0
func (_m *API) GetZones(_a0 context.Context) ([]tado.Zone, error) {
	ret := _m.Called(_a0)

	var r0 []tado.Zone
	if rf, ok := ret.Get(0).(func(context.Context) []tado.Zone); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.Zone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetZoneOverlay provides a mock function with given fields: _a0, _a1, _a2
func (_m *API) SetZoneOverlay(_a0 context.Context, _a1 int, _a2 float64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetZoneOverlayWithDuration provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *API) SetZoneOverlayWithDuration(_a0 context.Context, _a1 int, _a2 float64, _a3 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
